{"version":3,"sources":["components/loader/data/item.js","utils/constants.js","components/loader/data/index.js","components/loader/dots.js","components/error/index.js","components/chat/messages/user/text.js","utils/logger.js","utils/data/validators.js","utils/builder.js","utils/data/storage.js","utils/hash.js","utils/params.js","utils/data/index.js","components/chat/messages/info.js","components/utils/icon/index.js","components/utils/avatar/index.js","utils/data/handlers.js","components/chat/messages/margin.js","utils/synchronizer.js","utils/player.js","components/chat/messages/message.js","components/chat/messages/user/index.js","components/chat/messages/system/poll/options.js","components/chat/messages/system/poll/question.js","components/chat/messages/system/poll/result.js","components/chat/messages/system/message.js","components/chat/messages/system/poll/index.js","components/chat/messages/system/video/url.js","components/chat/messages/system/video/index.js","components/chat/messages/index.js","components/utils/hooks/index.js","components/chat/index.js","components/notes/index.js","components/player/application/content.js","utils/layout.js","components/player/application/control.js","components/player/application/index.js","components/presentation/cursor.js","components/presentation/slide/proxy.js","components/presentation/slide/index.js","components/presentation/canvas/poll.js","components/presentation/canvas/index.js","components/presentation/index.js","components/screenshare/index.js","components/thumbnails/image.js","components/thumbnails/thumbnail.js","components/thumbnails/item.js","components/utils/button/index.js","components/thumbnails/buttons/clear.js","components/thumbnails/index.js","components/player/buttons/fullscreen.js","components/player/content/index.js","components/webcams/index.js","components/player/media/index.js","components/modals/about/item.js","components/modals/about/body.js","components/modals/about/footer.js","components/modals/about/header.js","components/utils/modal/index.js","components/modals/about/index.js","components/modals/search/body.js","components/modals/search/footer.js","components/modals/search/header.js","utils/actions.js","components/modals/search/index.js","components/player/modal/index.js","components/bars/bottom.js","components/bars/top/title.js","components/bars/top/buttons/search.js","components/bars/top/buttons/section.js","components/bars/top/buttons/swap.js","components/bars/top/index.js","utils/shortcuts.js","components/player/index.js","components/loader/index.js","locales/messages/index.js","locales/index.js","index.js"],"names":["Item","icon","value","className","cx","loaded","style","transition","defaultProps","BUILD","process","REACT_APP_BBB_PLAYBACK_BUILD","ERROR","REACT_APP_MEDIA_ROOT_URL","EVENTS","TIME_UPDATE","ID","CONTENT","LAYOUT","NUMBERS","POSITIONS","SHAPES","Data","data","map","item","Dots","areEqual","React","memo","intlMessages","defineMessages","aria","id","description","Error","code","intl","useIntl","formatMessage","Text","active","hyperlink","text","options","inactive","Fragment","params","URLSearchParams","window","location","search","debug","has","logger","info","console","warn","error","hasPresentation","slides","isEmpty","i","length","src","includes","hasProperty","object","property","hasOwnProperty","isActive","time","timestamp","clear","cleared","wasCleared","visible","isVisible","isCurrent","index","hasIndex","current","next","isArray","isValid","isString","isEqual","first","second","type","equal","every","valid","Array","getAttr","attr","getChildren","children","getId","match","parseInt","shift","getNumbers","trimmed","trim","replace","split","v","parseFloat","buildCanvases","group","canvases","canvas","canvasAttr","canvasId","g","drawAttr","undo","items","forEach","buildStyle","drawId","shape","image","rect","Object","assign","polyline","line","polygon","circle","path","switch","foreignObject","child","grandchildren","grandchild","join","parseText","slide","find","splice","buildShapes","result","svg","img","slideId","in","push","height","width","sort","a","b","buildSlides","thumbnails","reduce","build","filename","Promise","resolve","reject","fileType","getFileType","config","alternates","presentation","buildAlternates","captions","polls","buildPolls","videos","r","url","external_video_url","buildVideos","notes","buildNotes","shapes","explicitChildren","preserveChildrenOrder","charsAsChildren","getOptions","parseStringPromise","then","chat","popcorn","chattimeline","out","message","decodeXML","clearHyperlink","initials","name","slice","toLowerCase","getInitials","buildChat","cursor","recording","event","position","x","y","buildCursor","metadata","meeting","meta","end","end_time","participants","start","start_time","buildMetadata","panzooms","panzoom","viewbox","viewBox","buildPanzooms","screenshare","start_timestamp","stop_timestamp","buildScreenshare","catch","STATE","STATUS","DATA","FALLBACK","hasLoaded","keys","files","fetchFile","recordId","onUpdate","onLoaded","onError","file","buildFileURL","fetch","response","ok","json","content","fetchMedia","fetches","medias","method","all","responses","media","endsWith","tryMediaFallback","storage","this","thumbnail","alt","found","addAlternatesToThumbnails","hash","str","charCodeAt","getSearchParam","get","parseTimeToSeconds","patterns","hours","minutes","seconds","timeToSeconds","h","m","s","getBar","percentage","bar","p","half","repeat","ltr","document","dir","concat","getCurrentContent","SCREENSHARE","PRESENTATION","isEnabled","getCurrentDataIndex","stop","middle","Math","floor","pop","POLL_TYPES","YN","YNA","TF","POLL_KEYS","Info","milliseconds","getTimestampAsMilliseconds","hourCycle","hour","minute","timeZone","Icon","Avatar","getAvatarStyle","handleOnEnterPress","action","key","handleAutoScroll","fNode","cNode","direction","align","pNode","parentNode","scrollLeft","firstNode","currentNode","clientWidth","offsetLeft","spacing","parentWidth","horizontalOffset","getScrollLeft","scrollTop","clientHeight","offsetTop","parentHeight","verticalOffset","getScrollTop","Margin","onClick","onKeyPress","tabIndex","STATUSES","Synchronizer","primary","secondary","status","synching","init","on","play","pause","currentTime","playbackRate","addEventListener","visibilityState","PLAYERS","SYNCHRONIZER","player","webcams","synchronizer","Message","User","prevProps","nextProps","yes","no","abstention","true","false","Options","answers","label","getPollLabel","question","Question","Result","responders","total","numVotes","toFixed","Poll","Url","Video","Messages","currentIndex","setRef","messages","getMessageType","ref","node","useCurrentContent","useState","currentContent","setCurrentContent","useEffect","handleTimeUpdate","nextContent","detail","removeEventListener","useCurrentIndex","setCurrentIndex","nextIndex","useCurrentInterval","interval","currentInterval","setCurrentInterval","sameIndex","nextInterval","currentDataInterval","getCurrentDataInterval","sameInterval","Chat","interaction","useRef","scroll","onMouseEnter","onMouseLeave","Notes","dangerouslySetInnerHTML","__html","Content","MODE","layout","DISABLED","control","mode","MEDIA","section","SWAPPED","swap","hasFullscreenButton","controls","fullscreen","isContentVisible","single","APPLICATIONS","Control","toggleApplication","application","DEFAULT","Application","setCurrent","Cursor","currentData","getCursor","cy","Proxy","Slide","href","fill","stroke","strokeWidth","transform","getCanvasData","Canvas","canvasData","j","intermediate","x1","y1","x2","y2","d","points","xmlns","buildViewBoxAttr","Presentation","currentPanzoomIndex","getViewBox","started","logo","xmlnsXlink","clipPath","Screenshare","sources","filter","source","element","video","videojs","buildOptions","dispose","playsInline","preload","Image","Thumbnail","interactive","handleOnClick","Button","disabled","solid","default","Clear","Thumbnails","handleSearch","isFiltered","restore","Fullscreen","toggleFullscreen","Webcams","fallback","tracks","lang","locale","localeName","kind","srclang","controlBar","fullscreenToggle","pictureInPictureToggle","volumePanel","inline","vertical","inactivityTimeout","playbackRates","rates","setInterval","CustomEvent","dispatchEvent","dispatchTimeUpdate","rps","clearInterval","param","getTime","duration","Media","Body","Footer","Header","subtitle","Date","day","month","year","close","Modal","onClose","About","handleClose","handleOnChange","maxLength","max","minLength","min","onChange","currentDataIndex","title","seek","skip","change","Search","setDisabled","setSearch","target","getValue","indexOf","getSearch","modal","Bottom","about","Title","openAbout","date","openSearch","Section","toggleSection","Swap","toggleSwap","Top","openModal","Shortcuts","actions","enabled","prop","listeners","add","k","listener","e","altKey","shiftKey","Player","setFullscreen","setModal","setSection","setSwap","shortcuts","prevFullscreen","prevSection","backward","forward","previous","prevSwap","destroy","Loader","counter","initError","setError","setUpdate","setLoaded","setTimeout","built","ar","de","en","es","fa","fr","it","ja","pt","ru","tr","RTL_LOCALES","navigator","language","body","setAttribute","setDirection","getLocale","styles","getStyle","ReactDOM","render","rel","getElementById"],"mappings":"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","file":"static/js/main.f937685f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport './index.scss';\n\nconst TRANSITION = .5;\n\nconst propTypes = {\n  icon: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]),\n};\n\nconst defaultProps = {\n  icon: '',\n  value: false,\n};\n\nconst Item = ({\n  icon,\n  value,\n}) => {\n\n  return (\n    <div\n      className={cx('item', { loaded: value })}\n      style={{ transition: `opacity ${TRANSITION}s ease-in` }}\n    >\n      <div className={`icon-${icon}`} />\n    </div>\n  );\n};\n\nItem.propTypes = propTypes;\nItem.defaultProps = defaultProps;\n\nexport default Item;\n","const BUILD = process.env.REACT_APP_BBB_PLAYBACK_BUILD;\nconst MEDIA_ROOT_URL = process.env.REACT_APP_MEDIA_ROOT_URL;\nconst NO_ROUTER = process.env.REACT_APP_NO_ROUTER;\n\nconst ERROR = {\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n};\n\nconst EVENT_PREFIX = 'bbbplayback';\n\nconst EVENTS = {\n  TIME_UPDATE: `${EVENT_PREFIX}timeupdate`,\n};\n\nconst ID = {\n  ABOUT: 'about',\n  ALTERNATES: 'alternates',\n  CANVASES: 'canvases',\n  CAPTIONS: 'captions',\n  CHAT: 'chat',\n  CURSOR: 'cursor',\n  DESKSHARE: 'deskshare',\n  ERROR: 'error',\n  LOADER: 'loader',\n  MEDIA: 'media',\n  MESSAGES: 'messages',\n  METADATA: 'metadata',\n  NOTES: 'notes',\n  PANZOOMS: 'panzooms',\n  PLAYER: 'player',\n  POLLS: 'polls',\n  PRESENTATION: 'presentation',\n  SCREENSHARE: 'screenshare',\n  SEARCH: 'search',\n  SETTINGS: 'settings',\n  SHAPES: 'shapes',\n  SLIDES: 'slides',\n  STORAGE: 'storage',\n  SWAP: 'swap',\n  THUMBNAILS: 'thumbnails',\n  USERS: 'users',\n  VIDEOS: 'videos',\n  WEBCAMS: 'webcams',\n};\n\nconst CONTENT = [\n  ID.PRESENTATION,\n  ID.CHAT,\n  ID.POLLS,\n  ID.VIDEOS,\n  ID.NOTES,\n  ID.SCREENSHARE,\n  ID.CAPTIONS,\n];\n\nconst LAYOUT = {\n  CONTENT: 'content',\n  DISABLED: 'disabled',\n  MEDIA: 'media',\n  SWAPPED: 'swapped',\n};\n\nconst NUMBERS = [\n  'zero', 'one', 'two', 'three',\n  'four', 'five', 'six', 'seven',\n  'eight', 'nine', 'ten', 'eleven',\n  'twelve', 'thirteen', 'fourteen', 'fifteen',\n];\n\nconst POSITIONS = {\n  BOTTOM: 'bottom',\n  CENTER: 'center',\n  LEFT: 'left',\n  MIDDLE: 'middle',\n  RIGHT: 'right',\n  TOP: 'top',\n};\n\nconst SHAPES = {\n  CIRCLE: 'circle',\n  LINE: 'line',\n  PATH: 'path',\n  POLL: 'poll',\n  POLYGON: 'polygon',\n  POLYLINE: 'polyline',\n  TEXT: 'text',\n};\n\nconst getRouter = () => {\n  if (typeof NO_ROUTER !== 'undefined') {\n    if (NO_ROUTER) return false;\n  }\n\n  return true;\n};\n\nconst ROUTER = getRouter();\n\nexport {\n  BUILD,\n  CONTENT,\n  ERROR,\n  EVENTS,\n  ID,\n  LAYOUT,\n  MEDIA_ROOT_URL,\n  NUMBERS,\n  POSITIONS,\n  ROUTER,\n  SHAPES,\n};\n","import React from 'react';\nimport Item from './item';\nimport { CONTENT } from 'utils/constants';\nimport './index.scss';\n\nconst Data = ({ data }) => {\n\n  return (\n    <div className=\"data-wrapper\">\n       {CONTENT.map((item) => (\n        <Item\n          icon={item}\n          key={item}\n          value={data[item]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Data;\n","import React from 'react';\nimport './index.scss';\n\nconst Dots = () => {\n\n  return (\n    <div className=\"dots-wrapper\">\n      <div className=\"first\" />\n      <div className=\"second\" />\n      <div className=\"third\" />\n    </div>\n  );\n};\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Dots, areEqual);\n","import React from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { ID } from 'utils/constants';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'error.wrapper.aria',\n    description: 'Aria label for the error wrapper',\n  },\n});\n\nconst Error = ({ code }) => {\n  const intl = useIntl();\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className=\"error-wrapper\"\n      id={ID.ERROR}\n    >\n      <div className=\"error-code\">\n        {code}\n      </div>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Linkify from 'linkifyjs/react';\nimport cx from 'classnames';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  hyperlink: PropTypes.bool,\n  text: PropTypes.string,\n};\n\nconst defaultProps = {\n  active: false,\n  hyperlink: false,\n  text: '',\n};\n\nconst Text = ({\n  active,\n  hyperlink,\n  text,\n}) => {\n  if (hyperlink) {\n    const options = {\n      className: cx('linkified', { inactive: !active }),\n    };\n\n    return (\n      <Linkify options={options}>\n        {text}\n      </Linkify>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {text}\n    </React.Fragment>\n  );\n};\n\nText.propTypes = propTypes;\nText.defaultProps = defaultProps;\n\nexport default Text;\n","const params = new URLSearchParams(window.location.search);\nconst debug = params ? params.has('debug') : false;\n\nconst logger = {\n  info: (...msg) => console.info(...msg),\n  debug: (...msg) => debug ? console.debug(...msg) : null,\n  warn: (...msg) => debug ? console.warn(...msg) : null,\n  error: (...msg) => console.error(...msg),\n};\n\nexport default logger;\n","import { LAYOUT } from 'utils/constants';\nimport logger from 'utils/logger';\n\nconst hasIndex = (index, data) => {\n  if (index < 0) return false;\n\n  if (isEmpty(data)) return false;\n\n  if (index >= data.length) {\n    logger.error('out of bounds', index, data);\n\n    return false;\n  }\n\n  return true;\n};\n\nconst hasPresentation = slides => {\n  if (isEmpty(slides)) return false;\n\n  for (let i = 0; i < slides.length; i++) {\n    const { src } = slides[i];\n\n    if (src.includes('slide')) return true;\n  }\n\n  return false;\n};\n\nconst hasProperty = (object, property) => {\n  if (object && object.hasOwnProperty(property)) {\n    if (typeof object[property] !== 'undefined') return true;\n  }\n\n  logger.warn('missing', property, object);\n\n  return false;\n};\n\nconst isActive = (time, timestamp, clear = -1) => {\n  const cleared = wasCleared(time, clear);\n  const visible = isVisible(time, timestamp);\n\n  return visible && !cleared;\n};\n\nconst isContentVisible = (layout, swap) => {\n  const {\n    CONTENT,\n    MEDIA,\n  } = LAYOUT;\n\n  let visible;\n  switch (layout) {\n    case  CONTENT:\n      visible = !swap;\n      break;\n    case MEDIA:\n      visible = swap;\n      break;\n    default:\n      visible = false;\n  }\n\n  return visible;\n};\n\nconst isCurrent = (data, index, time) => {\n  if (!hasIndex(index, data)) return false;\n\n  const item = data[index];\n  if (!hasProperty(item, 'timestamp')) return false;\n\n  let current = false;\n  if (isVisible(time, item.timestamp)) {\n    if (index + 1 < data.length) {\n      const next = data[index + 1];\n      if (hasProperty(next, 'timestamp')) {\n        current = !isVisible(time, next.timestamp);\n      }\n    } else {\n      current = true;\n    }\n  }\n\n  return current;\n};\n\nconst isDefined = data => typeof data !== 'undefined';\n\nconst isEmpty = data => {\n  const isArray = isValid('array', data);\n  const isString = isValid('string', data);\n  if (!isArray && !isString) return true;\n\n  const empty = data.length === 0;\n\n  return empty;\n};\n\nconst isEnabled = (data, time) => {\n  if (isEmpty(data)) return false;\n\n  for (let index = 0; index < data.length; index++) {\n    const item = data[index];\n    if (hasProperty(item, 'timestamp') && hasProperty(item, 'clear')) {\n      const {\n        clear,\n        timestamp,\n      } = item;\n\n      // Check if it was activated and did not ended\n      if (isActive(time, timestamp, clear)) return true;\n\n      // Check if we are searching over the present time value\n      if (!isVisible(time, timestamp)) return false;\n    } else {\n      // Invalid item\n      return false;\n    }\n  }\n\n  return false;\n};\n\nconst isEqual = (first, second, type = 'array') => {\n  let equal = false;\n\n  switch (type) {\n    case 'array':\n      if (first.length === second.length) {\n        equal = first.every((value, index) => value === second[index])\n      }\n\n      return equal;\n    default:\n      return equal;\n  }\n};\n\nconst isValid = (type, data) => {\n  let valid = false;\n\n  switch (type) {\n    case 'array':\n      if (Array.isArray(data)) valid = true;\n      break;\n    case 'string':\n      if (typeof data === type) valid = true;\n      break;\n    default:\n      logger.debug('unhandled', type);\n  }\n\n  return valid;\n};\n\nconst isVisible = (time, timestamp) => timestamp <= time;\n\nconst wasCleared = (time, clear) => clear !== -1 && clear <= time;\n\nexport {\n  hasIndex,\n  hasPresentation,\n  hasProperty,\n  isActive,\n  isContentVisible,\n  isCurrent,\n  isDefined,\n  isEmpty,\n  isEnabled,\n  isEqual,\n  isValid,\n  isVisible,\n  wasCleared,\n};\n","import { parseStringPromise } from 'xml2js';\nimport { files as config } from 'config';\nimport { getFileType } from './data';\nimport {\n  hasProperty,\n  isEmpty,\n} from './data/validators';\nimport {\n  ID,\n  SHAPES,\n} from './constants';\nimport logger from './logger';\n\nconst getAttr = data => {\n  if (!data) return {};\n\n  const attr = data['$'];\n  if (!attr) return {};\n\n  return attr;\n};\n\nconst getChildren = data => {\n  if (!data) return [];\n\n  const children = data['$$'];\n  if (!children) return [];\n\n  return children;\n};\n\nconst getId = data => {\n  if (!data) return -1;\n\n  const id = data.match(/\\d+$/);\n  if (!id || id.length === 0) return -1;\n\n  return parseInt(id.shift(), 10);\n};\n\nconst getNumbers = data => {\n  if (!data) return [];\n\n  const trimmed = data.trim().replace(/  +/g, ' ');\n  if (trimmed.length === 0) return [];\n\n  const split = trimmed.split(' ');\n  const numbers = split.map(v => parseFloat(v));\n\n  return numbers;\n};\n\nconst buildAlternates = result => {\n  if (!result) return [];\n\n  let data = [];\n  for (const presentation in result) {\n    if (hasProperty(result, presentation)) {\n      const slides = result[presentation];\n\n      for (const slide in slides) {\n        if (hasProperty(slides, slide)) {\n          const text = slides[slide];\n\n          data.push({\n            src: `presentation/${presentation}/${slide}.png`,\n            text,\n          });\n        }\n      }\n    }\n  }\n\n  return data;\n};\n\n// TODO\nconst buildCaptions = result => {\n  if (!result) return [];\n\n  let data = [];\n  data = result;\n\n  return data;\n};\n\n// TODO\nconst buildPolls = result => {\n  if (!result) return [];\n\n  let data = [];\n  data = result;\n\n  return data;\n};\n\nconst buildVideos = result => {\n  if (!result) return [];\n\n  const data = result.map(r => {\n    return {\n      timestamp: r.timestamp,\n      url: r.external_video_url,\n    };\n  });\n\n  return data;\n};\n\nconst buildMetadata = result => {\n  let data = {};\n  const { recording } = result;\n\n  if (hasProperty(recording, 'meeting')) {\n    const attr = getAttr(recording.meeting.shift());\n    const { id } = attr;\n    const meta = recording.meta.shift();\n    const end = parseInt(recording.end_time.shift(), 10);\n    const name = meta.name ? meta.name.shift() : attr.name;\n    const participants = parseInt(recording.participants.shift(), 10);\n    const start = parseInt(recording.start_time.shift(), 10);\n\n    data = {\n      end,\n      id,\n      name,\n      participants,\n      start,\n    };\n  }\n\n  return data;\n};\n\nconst buildNotes = result => {\n  if (!result) return '';\n\n  // Extract the notes' body\n  const regex = /<body>\\n.*\\n<\\/body>/g;\n  const match = result.match(regex);\n\n  let data = '';\n  if (!isEmpty(match)) {\n    data = match.shift();\n  }\n\n  return data;\n};\n\nconst buildStyle = data => {\n  const items = data.split(';');\n  let style = {};\n\n  items.forEach(item => {\n    const trimmed = item.trim();\n\n    if (trimmed.length === 0) return;\n\n    const split = trimmed.split(':').map(i => i.trim());\n\n    // Remove visibility\n    if (split[0] === 'visibility') return;\n\n    style[split[0]] = split[1];\n  });\n\n  return style;\n};\n\nconst buildSlides = image => {\n  let slides = [];\n\n  if (image) {\n    image.forEach(img => {\n      const attr = getAttr(img);\n      const src = attr['xlink:href'];\n\n      // Skip the logo\n      if (!src) return;\n\n      // Get the number from the id name\n      const slideId = getId(attr.id);\n      const timestamps = getNumbers(attr.in);\n\n      timestamps.forEach(timestamp => {\n        slides.push({\n          id: slideId,\n          height: parseInt(attr.height),\n          src,\n          timestamp,\n          width: parseInt(attr.width),\n        });\n      });\n    });\n\n    slides = slides.sort((a, b) => a.timestamp - b.timestamp);\n  }\n\n  return slides;\n};\n\nconst buildThumbnails = slides => {\n  const prefix = 'slide-';\n  const url = 'thumbnails/thumb-';\n\n  return slides.reduce((result, slide) => {\n    const {\n      id,\n      src,\n      timestamp,\n    } = slide;\n\n    if (src.includes(ID.DESKSHARE)) {\n      result.push({\n        id,\n        src: ID.SCREENSHARE,\n        timestamp,\n      });\n    } else {\n      result.push({\n        id,\n        src: src.replace(prefix, url),\n        timestamp,\n      });\n    }\n\n    return result;\n  }, []);\n};\n\nconst parseText = data => {\n  let text = '';\n\n  const children = getChildren(data);\n  if (!isEmpty(children)) {\n    const child = children.shift();\n    const grandchildren = getChildren(child);\n    if (!isEmpty(grandchildren)) {\n      text = grandchildren.map(grandchild => {\n        const name = grandchild['#name'];\n        if (name === 'br') return '\\r';\n\n        return grandchild['_'];\n      }).join('');\n    }\n  }\n\n  return text;\n};\n\nconst buildCanvases = (group, slides) => {\n  let canvases = [];\n\n  if (group) {\n    canvases = group.map(canvas => {\n      const canvasAttr = getAttr(canvas);\n      const canvasId = getId(canvasAttr.id);\n\n      let data = canvas.g.map(g => {\n        const drawAttr = getAttr(g);\n        const timestamp = parseFloat(drawAttr.timestamp);\n        const clear = parseFloat(drawAttr.undo);\n        const style = buildStyle(drawAttr.style);\n        const drawId = getId(drawAttr.shape);\n\n        let shape = {};\n        if (g.image) {\n          shape.type = SHAPES.POLL;\n          const image = getAttr(g.image.shift());\n          // TODO: Better adapt for old versions\n          // Versions prior to 2.3 included a rect structure along with an image\n          if (g.rect) {\n            const rect = getAttr(g.rect.shift());\n            shape.data = Object.assign({ rect }, { image });\n          } else {\n            shape.data = Object.assign({ image });\n          }\n        } else if (g.polyline) {\n          shape.type = SHAPES.POLYLINE;\n          shape.data = Object.assign({}, getAttr(g.polyline.shift()));\n        } else if (g.line) {\n          shape.type = SHAPES.LINE;\n          shape.data = Object.assign({}, getAttr(g.line.shift()));\n        } else if (g.polygon) {\n          shape.type = SHAPES.POLYGON;\n          shape.data = Object.assign({}, getAttr(g.polygon.shift()));\n        } else if (g.circle) {\n          shape.type = SHAPES.CIRCLE;\n          shape.data = Object.assign({}, getAttr(g.circle.shift()));\n        } else if (g.path) {\n          shape.type = SHAPES.PATH;\n          shape.data = Object.assign({}, getAttr(g.path.shift()));\n        } else if (g.switch) {\n          shape.type = SHAPES.TEXT;\n          const foreignObject = g.switch.shift()['foreignObject'].shift();\n          const text = parseText(foreignObject);\n          shape.data = Object.assign({ text }, getAttr(foreignObject));\n        }\n\n        return {\n          clear,\n          id: drawId,\n          shape,\n          style,\n          timestamp,\n        };\n      });\n\n      return {\n        data,\n        id: canvasId,\n      };\n    });\n  }\n\n  slides.forEach((slide, index) => {\n    const found = canvases.find(canvas => canvas.id === slide.id);\n    if (found) {\n      canvases[index].timestamp = slide.timestamp;\n    } else {\n      const canvas = {\n        data: [],\n        id: slide.id,\n        timestamp: slide.timestamp,\n      };\n\n      canvases.splice(index, 0, canvas);\n    }\n  });\n\n  return canvases;\n};\n\nconst buildShapes = result => {\n  let data = {};\n  const { svg } = result;\n\n  if (svg) {\n    const {\n      image,\n      g,\n    } = svg;\n\n    data.slides = buildSlides(image);\n    data.thumbnails = buildThumbnails(data.slides);\n    data.canvases = buildCanvases(g, data.slides);\n  }\n\n  return data;\n};\n\nconst buildPanzooms = result => {\n  let data = [];\n  const { recording } = result;\n\n  if (hasProperty(recording, 'event')) {\n    data = recording.event.map(panzoom => {\n      const attr = getAttr(panzoom);\n      const viewbox = getNumbers(panzoom.viewBox.shift());\n\n      return {\n        timestamp: parseFloat(attr.timestamp),\n        x: viewbox.shift(),\n        y: viewbox.shift(),\n        width: viewbox.shift(),\n        height: viewbox.shift(),\n      };\n    });\n  }\n\n  return data;\n};\n\nconst buildCursor = result => {\n  let data = [];\n  const { recording } = result;\n\n  if (hasProperty(recording, 'event')) {\n    data = recording.event.map(cursor => {\n      const attr = getAttr(cursor);\n      const position = getNumbers(cursor.cursor.shift());\n\n      return {\n        timestamp: parseFloat(attr.timestamp),\n        x: position.shift(),\n        y: position.shift(),\n      };\n    });\n  }\n\n  return data;\n};\n\nconst clearHyperlink = message => {\n  const regex = /<a href=\"(.*)\" rel=\"nofollow\"><u>\\1<\\/u><\\/a>/g;\n\n  return message.replace(regex, '$1');\n};\n\nconst decodeXML = message => {\n  return message\n    .replace(/&(quot|#34);/g, '\"')\n    .replace(/&(amp|#38);/g, '&')\n    .replace(/&(apos|#39);/g, \"'\")\n    .replace(/&(lt|#60);/g, '<')\n    .replace(/&(gt|#62);/g, '>');\n};\n\nconst getInitials = name => {\n  let initials;\n\n  if (name) {\n    initials = name\n      .slice(0, 2)\n      .toLowerCase()\n      .trim();\n  }\n\n  return initials;\n};\n\nconst buildChat = result => {\n  const { popcorn } = result;\n  let data = [];\n\n  if (hasProperty(popcorn, 'chattimeline')) {\n    const { chattimeline } = popcorn;\n    data = chattimeline.map(chat => {\n      const attr = getAttr(chat);\n      const clear = attr.out ? parseFloat(attr.out) : -1;\n      const message = decodeXML(clearHyperlink(attr.message));\n      const initials = getInitials(attr.name);\n\n      return {\n        clear,\n        hyperlink: message !== attr.message,\n        initials,\n        name: attr.name,\n        message,\n        timestamp: parseFloat(attr.in),\n      };\n    });\n  }\n\n  return data;\n};\n\nconst buildScreenshare = result => {\n  let data = [];\n  const { recording } = result;\n\n  if (hasProperty(recording, 'event')) {\n    data = recording.event.map(screenshare => {\n      const attr = getAttr(screenshare);\n\n      return {\n        timestamp: parseFloat(attr.start_timestamp),\n        clear: parseFloat(attr.stop_timestamp),\n      };\n    });\n  }\n\n  return data;\n};\n\nconst getOptions = filename => {\n  let options = {};\n\n  switch (filename) {\n    case config.shapes:\n      options = {\n        explicitChildren: true,\n        preserveChildrenOrder: true,\n        charsAsChildren: true,\n      };\n      break;\n    default:\n  }\n\n  return options;\n};\n\nconst build = (filename, value) => {\n  return new Promise((resolve, reject) => {\n    let data;\n    const fileType = getFileType(filename);\n\n    if (fileType === 'json') {\n      switch (filename) {\n        case config.alternates:\n          data = buildAlternates(value);\n          break;\n        case config.captions:\n          data = buildCaptions(value);\n          break;\n        case config.polls:\n          data = buildPolls(value);\n          break;\n        case config.videos:\n          data = buildVideos(value);\n          break;\n        default:\n          logger.debug('unhandled', 'json', filename);\n          reject(filename);\n      }\n      resolve(data);\n    } else if (fileType === 'html') {\n      switch (filename) {\n        case config.notes:\n          data = buildNotes(value);\n          break;\n        default:\n          logger.debug('unhandled', 'html', filename);\n          reject(filename);\n      }\n      resolve(data);\n    } else {\n      if (!value) {\n        logger.warn('missing', filename);\n\n        return resolve(null);\n      }\n\n      // Parse XML data\n      const options = getOptions(filename);\n      parseStringPromise(value, options).then(result => {\n        switch (filename) {\n          case config.chat:\n            data = buildChat(result);\n            break;\n          case config.cursor:\n            data = buildCursor(result);\n            break;\n          case config.metadata:\n            data = buildMetadata(result);\n            break;\n          case config.panzooms:\n            data = buildPanzooms(result);\n            break;\n          case config.screenshare:\n            data = buildScreenshare(result);\n            break;\n          case config.shapes:\n            data = buildShapes(result);\n            break;\n          default:\n            logger.debug('unhandled', 'xml', filename);\n            reject(filename);\n        }\n        resolve(data);\n      }).catch(error => reject(error));\n    }\n  });\n};\n\nconst addAlternatesToThumbnails = (thumbnails, alternates) => {\n  const prefix = 'thumbnails/thumb-';\n  const url = 'slide-';\n\n  return thumbnails.map(thumbnail => {\n    const { src } = thumbnail;\n    thumbnail.alt = '';\n\n    const found = alternates.find(alt => src.replace(prefix, url) === alt.src);\n    if (found) thumbnail.alt = found.text;\n\n    return thumbnail;\n  });\n};\n\nconst mergeMessages = (chat, polls, videos) => {\n  return [\n    ...chat,\n    ...polls,\n    ...videos,\n  ].sort((a, b) => a.timestamp - b.timestamp);\n};\n\nexport {\n  addAlternatesToThumbnails,\n  build,\n  buildStyle,\n  decodeXML,\n  getAttr,\n  getId,\n  getNumbers,\n  mergeMessages,\n};\n","import {\n  files,\n  medias,\n} from 'config';\nimport {\n  addAlternatesToThumbnails,\n  build,\n  mergeMessages,\n} from 'utils/builder';\nimport {\n  ERROR,\n  ID,\n} from 'utils/constants';\nimport {\n  buildFileURL,\n  getFileType,\n} from 'utils/data';\nimport {\n  hasPresentation,\n  hasProperty,\n  isEmpty,\n} from 'utils/data/validators';\nimport logger from 'utils/logger';\n\nconst STATE = {\n  WAITING: 'waiting',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n};\n\nlet STATUS = STATE.WAITING;\n\nconst DATA = {};\n\nlet FALLBACK = false;\n\nconst hasFetched = () => {\n  if (STATUS !== STATE.WAITING) return true;\n\n  logger.debug(ID.STORAGE, STATE.LOADING);\n  STATUS = STATE.LOADING;\n\n  return false;\n}\n\nconst hasLoaded = () => {\n  const stored = Object.keys(DATA).length;\n  const data = Object.keys(files).length;\n\n  if (stored > data) {\n    logger.debug(ID.STORAGE, STATE.LOADED);\n    STATUS = STATE.LOADED;\n\n    return true;\n  }\n\n  return false;\n};\n\nconst fetchFile = (data, recordId, onUpdate, onLoaded, onError) => {\n  const file = files[data];\n  const url = buildFileURL(file, recordId);\n  fetch(url).then(response => {\n    if (response.ok) {\n      logger.debug(ID.STORAGE, file, response);\n      const fileType = getFileType(file);\n      switch (fileType) {\n        case 'json':\n          return response.json();\n        case 'html':\n          return response.text();\n        case 'svg':\n          return response.text();\n        case 'xml':\n          return response.text();\n        default:\n          onError(ERROR.BAD_REQUEST);\n          return null;\n      }\n    } else {\n      logger.warn(ID.STORAGE, file, response);\n      return null;\n    }\n  }).then(value => {\n    build(file, value).then(content => {\n      if (content) logger.debug(ID.STORAGE, 'builded', file);\n      DATA[data] = content;\n      onUpdate(data);\n      if (hasLoaded()) onLoaded();\n    }).catch(error => onError(ERROR.BAD_REQUEST));\n  }).catch(error => onError(ERROR.NOT_FOUND));\n};\n\nconst fetchMedia = (recordId, onUpdate, onLoaded, onError) => {\n  const fetches = medias.map(type => {\n    const url = buildFileURL(`video/webcams.${type}`, recordId);\n    return fetch(url, { method: 'HEAD' });\n  });\n\n  Promise.all(fetches).then(responses => {\n    const media = [];\n    responses.forEach(response => {\n      const { ok, url } = response;\n      if (ok) {\n        logger.debug(ID.STORAGE, ID.MEDIA, response);\n        media.push(medias.find(type => url.endsWith(type)));\n      }\n    });\n\n    if (media.length > 0) {\n      DATA[ID.MEDIA] = media;\n      onUpdate(ID.MEDIA);\n      if (hasLoaded()) onLoaded();\n    } else {\n      tryMediaFallback(recordId, onUpdate, onLoaded, onError);\n    }\n  });\n};\n\n// Try playing old recording formats with audio only\n// IMPORTANT: This will only work for webm format\n//\n// TODO: Add support for mp3 format\nconst tryMediaFallback = (recordId, onUpdate, onLoaded, onError) => {\n  const url = buildFileURL('audio/audio.webm', recordId);\n  fetch(url, { method: 'HEAD' }).then(response => {\n    const { ok } = response;\n    if (ok) {\n      logger.debug(ID.STORAGE, ID.MEDIA, response);\n      FALLBACK = true;\n      DATA[ID.MEDIA] = ['webm'];\n      onUpdate(ID.MEDIA);\n      if (hasLoaded()) onLoaded();\n    } else {\n      onError(ERROR.NOT_FOUND);\n    }\n  });\n};\n\nconst storage = {\n  fetch: (recordId, onUpdate, onLoaded, onError) => {\n    if (hasFetched()) return null;\n\n    for (const data in files) {\n      fetchFile(data, recordId, onUpdate, onLoaded, onError);\n    }\n\n    fetchMedia(recordId, onUpdate, onLoaded, onError);\n  },\n  get status() {\n    return STATUS;\n  },\n  get data() {\n    return DATA;\n  },\n  get fallback() {\n    return FALLBACK;\n  },\n  get built() {\n    return {\n      captions: hasProperty(DATA, ID.CAPTIONS),\n      chat: hasProperty(DATA, ID.CHAT),\n      notes: hasProperty(DATA, ID.NOTES),\n      polls: hasProperty(DATA, ID.POLLS),\n      videos: hasProperty(DATA, ID.VIDEOS),\n      presentation: hasProperty(DATA, ID.SHAPES),\n      screenshare: hasProperty(DATA, ID.SCREENSHARE),\n    };\n  },\n  get content() {\n    return {\n      captions: !isEmpty(this.captions),\n      chat: !isEmpty(this.chat),\n      notes: !isEmpty(this.notes),\n      polls: !isEmpty(this.polls),\n      videos: !isEmpty(this.videos),\n      presentation: hasPresentation(this.slides),\n      screenshare: !isEmpty(this.screenshare),\n    };\n  },\n  get alternates() {\n    return DATA[ID.ALTERNATES];\n  },\n  get captions() {\n    return DATA[ID.CAPTIONS];\n  },\n  get chat() {\n    return DATA[ID.CHAT];\n  },\n  get polls() {\n    return DATA[ID.POLLS];\n  },\n  get videos() {\n    return DATA[ID.VIDEOS];\n  },\n  get cursor() {\n    return DATA[ID.CURSOR];\n  },\n  get media() {\n    return DATA[ID.MEDIA];\n  },\n  get messages() {\n    if (!hasProperty(DATA, ID.MESSAGES)) {\n      DATA[ID.MESSAGES] = mergeMessages(\n        this.chat,\n        this.polls,\n        this.videos,\n      );\n    }\n\n    return DATA[ID.MESSAGES];\n  },\n  get metadata() {\n    return DATA[ID.METADATA];\n  },\n  get notes() {\n    return DATA[ID.NOTES];\n  },\n  get panzooms() {\n    return DATA[ID.PANZOOMS];\n  },\n  get screenshare() {\n    return DATA[ID.SCREENSHARE];\n  },\n  get shapes() {\n    return DATA[ID.SHAPES];\n  },\n  get slides() {\n    return this.shapes[ID.SLIDES];\n  },\n  get canvases() {\n    return this.shapes[ID.CANVASES];\n  },\n  get thumbnails() {\n    if (!hasProperty(DATA, ID.THUMBNAILS)) {\n      DATA[ID.THUMBNAILS] = addAlternatesToThumbnails(this.shapes[ID.THUMBNAILS], this.alternates);\n    }\n\n    return DATA[ID.THUMBNAILS];\n  },\n};\n\nexport default storage;\n","// @ironwallaby's string-hash\n// https://github.com/darkskyapp/string-hash\nconst hash = (str) => {\n  let hash = 5381;\n\n  let i = str.length;\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n};\n\nexport default hash;\n","import config from 'config';\nimport { ROUTER } from './constants';\nimport logger from './logger';\n\nconst getLayout = () => {\n  const param = getSearchParam('l');\n\n  if (param) return param;\n\n  return null;\n};\n\nconst getMediaPath = () => {\n  const param = getSearchParam('p');\n\n  let mediaPath = '';\n  if (param) mediaPath = param;\n\n  return mediaPath;\n};\n\nconst getRecordId = match => {\n  if (!ROUTER) return 'local';\n\n  if (match) {\n    const { params } = match;\n    if (params && params.recordId) {\n      const { recordId } = params;\n      const regex = /^[a-z0-9]{40}-[0-9]{13}$/;\n\n      if (recordId.match(regex)) return recordId;\n    }\n  }\n\n  logger.error('missing', 'recordId');\n\n  return null;\n};\n\nconst getSearchParam = (name) => {\n  const params = new URLSearchParams(window.location.search);\n\n  if (params && params.has(name)) {\n    const param = params.get(name);\n\n    return param;\n  }\n\n  return null;\n};\n\nconst getStyle = () => {\n  const param = getSearchParam('s');\n  const { styles } = config;\n  const { url } = styles;\n\n  let style = styles.default ? `${url}/${styles.default}.css` : null;\n  if (param) {\n    const { valid } = styles;\n    if (valid.includes(param)) {\n      style = `${url}/${param}.css`;\n    }\n  }\n\n  return style;\n};\n\nconst getTime = () => {\n  const param = getSearchParam('t');\n\n  if (param) return parseTimeToSeconds(param);\n\n  return null;\n};\n\nconst parseTimeToSeconds = time => {\n  const patterns = [\n    /^(\\d+)h(\\d+)m(\\d+)s$/,\n    /^(\\d+)m(\\d+)s$/,\n    /^(\\d+)s$/,\n  ];\n\n  for (let i = 0; i < patterns.length; i++) {\n    if (time.match(patterns[i])) {\n      const hours = time.match(/(\\d+)h/);\n      const minutes = time.match(/(\\d+)m/);\n      const seconds = time.match(/(\\d+)s/);\n\n      let timeToSeconds = 0;\n\n      if (hours) {\n        const h = parseInt(hours[1]);\n        if (h >= 0) timeToSeconds += h * 3600;\n      }\n\n      if (minutes) {\n        const m = parseInt(minutes[1]);\n        if (m >= 0 && m < 60) {\n          timeToSeconds += m * 60;\n        } else {\n          return null;\n        }\n      }\n\n      if (seconds) {\n        const s = parseInt(seconds[1]);\n        if (s >= 0 && s < 60) {\n          timeToSeconds += s;\n        } else {\n          return null;\n        }\n      }\n\n      return timeToSeconds;\n    }\n  }\n\n  return null;\n};\n\nexport {\n  getLayout,\n  getMediaPath,\n  getRecordId,\n  getStyle,\n  getSearchParam,\n  getTime,\n  parseTimeToSeconds,\n};\n","import {\n  ID,\n  MEDIA_ROOT_URL,\n  NUMBERS,\n  ROUTER,\n} from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport {\n  hasProperty,\n  isCurrent,\n  isEmpty,\n  isEnabled,\n  isVisible,\n  wasCleared,\n} from 'utils/data/validators';\nimport hash from 'utils/hash';\nimport { getMediaPath } from 'utils/params';\n\nconst buildFileURL = (file, recordId = null) => {\n  if (!ROUTER) return file;\n\n  const mediaPath = getMediaPath();\n\n  const rootUrl = MEDIA_ROOT_URL ? MEDIA_ROOT_URL : '/presentation';\n\n  const id = recordId ? recordId : storage.metadata.id;\n  let fileUrl = `${id}/${file}`;\n  if (mediaPath) fileUrl = `${mediaPath}/${fileUrl}`;\n\n  return `${rootUrl}/${fileUrl}`;\n};\n\nconst getAvatarStyle = name => {\n  const index = hash(name) % NUMBERS.length;\n\n  return `avatar-${NUMBERS[index]}`;\n};\n\nconst FULL_BLOCK = '█';\nconst LEFT_HALF_BLOCK = '▌';\nconst RIGHT_HALF_BLOCK = '▐';\nconst EMPTY_BLOCK = '-';\n\nconst getBar = (percentage) => {\n  const p = parseInt(percentage);\n\n  let bar;\n  if (p === 0) {\n    bar = EMPTY_BLOCK;\n  } else {\n    const full = p / 10;\n    const half = (p % 10) > 2;\n\n    bar = FULL_BLOCK.repeat(full);\n\n    if (half) {\n      // Add true fallback for the tests\n      const ltr = document.dir ? document.dir === 'ltr' : true;\n      bar = bar.concat(ltr ? LEFT_HALF_BLOCK : RIGHT_HALF_BLOCK);\n    }\n  }\n\n  return bar;\n};\n\nconst getCurrentContent = (time) => {\n  const {\n    SCREENSHARE,\n    PRESENTATION,\n  } = ID;\n\n  const content = isEnabled(storage.screenshare, time) ? SCREENSHARE : PRESENTATION;\n\n  return content;\n};\n\nconst getCurrentDataIndex = (data, time) => {\n  if (isEmpty(data)) return -1;\n\n  let start = 0;\n  let stop = data.length - 1;\n  let middle = Math.floor((start + stop) / 2);\n\n  while (!isCurrent(data, middle, time) && start < stop) {\n    const item = data[middle];\n    if (!hasProperty(item, 'timestamp')) return -1;\n\n    if (!isVisible(time, item.timestamp)) {\n      stop = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n\n    middle = Math.floor((start + stop) / 2);\n  }\n\n  const current = isCurrent(data, middle, time);\n\n  return (!current) ? -1 : middle;\n};\n\nconst getCurrentDataInterval = (data, time) => {\n  const currentDataInterval = [];\n\n  if (isEmpty(data)) return currentDataInterval;\n\n  for (let index = 0; index < data.length; index++) {\n    const item = data[index];\n    if (hasProperty(item, 'timestamp') && hasProperty(item, 'clear')) {\n      const {\n        clear,\n        timestamp,\n      } = item;\n\n      if (!isVisible(time, timestamp)) break;\n\n      currentDataInterval.push(!wasCleared(time, clear));\n    }\n  }\n\n  return currentDataInterval;\n};\n\nconst getFileType = file => file.split('.').pop();\n\nconst getPercentage = (value, total) => {\n  if (total === 0) return 0;\n\n  return ((value / total) * 100).toFixed(1);\n};\n\nconst POLL_TYPES = {\n  YN: 'YN',\n  YNA: 'YNA',\n  TF: 'TF',\n};\n\nconst POLL_KEYS = [\n  'Yes',\n  'No',\n  'Abstention',\n  'True',\n  'False',\n];\n\nconst getPollLabel = (key, type) => {\n  if (!POLL_TYPES[type]) return null;\n\n  if (!POLL_KEYS.includes(key)) return null;\n\n  return key.toLowerCase();\n};\n\nconst getMessageType = (item) => {\n  if (typeof item.message === 'string') return ID.USERS;\n  if (typeof item.question === 'string') return ID.POLLS;\n  if (typeof item.url === 'string') return ID.VIDEOS;\n\n  return 'undefined';\n};\n\nconst getTimestampAsMilliseconds = timestamp => timestamp * 1000;\n\nexport {\n  buildFileURL,\n  getAvatarStyle,\n  getBar,\n  getCurrentContent,\n  getCurrentDataIndex,\n  getCurrentDataInterval,\n  getFileType,\n  getMessageType,\n  getPercentage,\n  getPollLabel,\n  getTimestampAsMilliseconds,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedTime } from 'react-intl';\nimport cx from 'classnames';\nimport { getTimestampAsMilliseconds } from 'utils/data';\nimport './index.scss';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  name: PropTypes.string,\n  timestamp: PropTypes.number,\n};\n\nconst defaultProps = {\n  active: false,\n  name: '',\n  timestamp: 0,\n};\n\nconst Info = ({\n  active,\n  name,\n  timestamp,\n}) => {\n  const milliseconds = getTimestampAsMilliseconds(timestamp);\n\n  return (\n    <div className=\"info\">\n      <div className={cx('name', { inactive: !active })}>\n        {name}\n      </div>\n      <div className={cx('time', { inactive: !active })}>\n        <FormattedTime\n          hourCycle=\"h23\"\n          hour=\"numeric\"\n          minute=\"numeric\"\n          second=\"numeric\"\n          timeZone=\"UTC\"\n          value={milliseconds}\n        />\n      </div>\n    </div>\n  );\n};\n\nInfo.propTypes = propTypes;\nInfo.defaultProps = defaultProps;\n\nexport default Info;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nconst propTypes = { name: PropTypes.string };\n\nconst defaultProps = { name: '' };\n\nconst Icon = ({ name }) => {\n\n  return <span className={`icon-${name}`} />;\n};\n\nIcon.propTypes = propTypes;\nIcon.defaultProps = defaultProps;\n\nexport default Icon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from 'components/utils/icon';\nimport { getAvatarStyle } from 'utils/data';\nimport './index.scss';\n\nconst propTypes = {\n  circle: PropTypes.bool,\n  icon: PropTypes.string,\n  initials: PropTypes.string,\n  name: PropTypes.string,\n};\n\nconst defaultProps = {\n  circle: false,\n  icon: '',\n  initials: '',\n  name: '',\n};\n\nconst Avatar = ({\n  circle,\n  icon,\n  initials,\n  name,\n}) => {\n  const style = circle ? getAvatarStyle(name) : 'avatar-default';\n\n  return (\n    <div className=\"avatar-wrapper\">\n      <div className={cx('avatar', { circle }, style)}>\n        {icon ? (\n          <Icon name={icon} />\n        ) : (\n          <span className=\"initials\">\n            {initials}\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nAvatar.propTypes = propTypes;\nAvatar.defaultProps = defaultProps;\n\nexport default Avatar;\n","import { POSITIONS } from 'utils/constants';\nimport logger from 'utils/logger';\n\nconst getScrollLeft = (firstNode, currentNode, align) => {\n  if (!currentNode) return 0;\n\n  const {\n    clientWidth,\n    offsetLeft,\n    parentNode,\n  } = currentNode;\n\n  if (!firstNode || !parentNode) return 0;\n\n  const ltr = document.dir === 'ltr';\n  const spacing = ltr ? firstNode.offsetLeft : 0;\n  const parentWidth = parentNode.clientWidth;\n\n  let horizontalOffset = 0;\n  switch (align) {\n    case POSITIONS.LEFT:\n      horizontalOffset = offsetLeft - spacing;\n      break;\n    case POSITIONS.CENTER:\n      horizontalOffset = parseInt(offsetLeft + (clientWidth - spacing - parentWidth) / 2, 10);\n      break;\n    case POSITIONS.RIGHT:\n      horizontalOffset = offsetLeft + clientWidth - parentWidth;\n      break;\n    default:\n      logger.debug('unhandled', align);\n  }\n\n  return horizontalOffset;\n};\n\nconst getScrollTop = (firstNode, currentNode, align) => {\n  if (!currentNode) return 0;\n\n  const {\n    clientHeight,\n    offsetTop,\n    parentNode,\n  } = currentNode;\n\n  if (!firstNode || !parentNode) return 0;\n\n  const spacing = firstNode.offsetTop;\n  const parentHeight = parentNode.clientHeight;\n\n  let verticalOffset = 0;\n  switch (align) {\n    case POSITIONS.TOP:\n      verticalOffset = offsetTop - spacing;\n      break;\n    case POSITIONS.MIDDLE:\n      verticalOffset = parseInt(offsetTop + (clientHeight - spacing - parentHeight) / 2, 10);\n      break;\n    case POSITIONS.BOTTOM:\n      verticalOffset = offsetTop + clientHeight - parentHeight;\n      break;\n    default:\n      logger.debug('unhandled', align);\n  }\n\n  return verticalOffset;\n};\n\nconst handleOnEnterPress = (event, action) => {\n  if (event && event.key === 'Enter') {\n    if (typeof action === 'function') action();\n  }\n};\n\nconst handleAutoScroll = (fNode, cNode, direction, align) => {\n  // Auto-scroll can start after getting the first and current nodes\n  if (fNode && cNode) {\n    const { parentNode: pNode } = cNode;\n\n    switch (direction) {\n      case POSITIONS.LEFT:\n        pNode.scrollLeft = getScrollLeft(fNode, cNode, align);\n        break;\n      case POSITIONS.TOP:\n        pNode.scrollTop = getScrollTop(fNode, cNode, align);\n        break;\n      default:\n        logger.debug('unhandled', direction);\n    }\n  }\n};\n\nexport {\n  getScrollLeft,\n  getScrollTop,\n  handleAutoScroll,\n  handleOnEnterPress,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Avatar from 'components/utils/avatar';\nimport { handleOnEnterPress } from 'utils/data/handlers';\nimport './index.scss';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  circle: PropTypes.bool,\n  icon: PropTypes.string,\n  initials: PropTypes.string,\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nconst defaultProps = {\n  active: false,\n  circle: false,\n  icon: '',\n  initials: '',\n  name: '',\n  onClick: () => {},\n};\n\nconst Margin = ({\n  active,\n  circle,\n  icon,\n  initials,\n  name,\n  onClick,\n}) => {\n  const style = {\n    circle,\n    inactive: !active,\n  };\n\n  return (\n    <div\n      className={cx('interactive', style)}\n      onClick={onClick}\n      onKeyPress={event => handleOnEnterPress(event, onClick)}\n      tabIndex=\"0\"\n    >\n      <Avatar\n        active={active}\n        circle={circle}\n        icon={icon}\n        initials={initials}\n        name={name}\n      />\n    </div>\n  );\n};\n\nMargin.propTypes = propTypes;\nMargin.defaultProps = defaultProps;\n\nexport default Margin;\n","import logger from './logger';\n\nconst STATUSES = [\n  'canplay',\n  'seeking',\n  'waiting',\n];\n\nconst EVENTS = [\n  'abort',\n  'canplay',\n  'canplaythrough',\n  'durationchange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'interruptbegin',\n  'interruptend',\n  'loadeddata',\n  'loadedmetadata',\n  'loadstart',\n  'mozaudioavailable',\n  'pause',\n  'play',\n  'playing',\n  'progress',\n  'ratechange',\n  'seeked',\n  'seeking',\n  'stalled',\n  'suspend',\n  //'timeupdate',\n  'volumechange',\n  'waiting',\n];\n\nexport default class Synchronizer {\n  constructor(primary, secondary) {\n    this.primary = primary;\n    this.secondary = secondary;\n\n    this.status = {\n      primary: 'waiting',\n      secondary: 'waiting',\n    }\n\n    this.synching = false;\n\n    this.init();\n  }\n\n  init() {\n    STATUSES.forEach(status => {\n      this.primary.on(status, () => this.status.primary = status);\n      this.secondary.on(status, () => this.status.secondary = status);\n    });\n\n    this.primary.on('play', () => this.secondary.play());\n    this.primary.on('pause', () => this.secondary.pause());\n\n    this.primary.on('seeking', () => {\n      const currentTime = this.primary.currentTime();\n      this.secondary.currentTime(currentTime);\n    });\n\n    this.primary.on('ratechange', () => {\n      const playbackRate = this.primary.playbackRate();\n      this.secondary.playbackRate(playbackRate);\n    });\n\n    this.primary.on('waiting', () => {\n      if (!this.synching && this.status.secondary === 'canplay') {\n        this.synching = true;\n        this.primary.pause();\n      }\n    });\n\n    this.primary.on('canplay', () => {\n      if (this.synching) {\n        this.synching = false;\n        this.primary.play();\n      }\n    });\n\n    this.secondary.on('waiting', () => {\n      if (!this.synching && this.status.primary === 'canplay') {\n        this.synching = true;\n        this.primary.pause();\n      }\n    });\n\n    this.secondary.on('canplay', () => {\n      if (this.synching) {\n        this.synching = false;\n        this.primary.play();\n      }\n    });\n\n    // IMPORTANT: Blink holds the secondary media down while the document\n    // page is not visible\n    // Force medias to sync on visibility change and document is visible\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        const currentTime = this.primary.currentTime();\n        this.secondary.currentTime(currentTime);\n      }\n    });\n\n    EVENTS.forEach(event => {\n      this.primary.on(event, () => logger.debug(`primary ${event} ${this.status.primary}`));\n      this.secondary.on(event, () => logger.debug(`secondary ${event} ${this.status.secondary}`));\n    });\n  }\n}\n","import { ID } from 'utils/constants';\nimport Synchronizer from 'utils/synchronizer';\n\nconst PLAYERS = {};\nlet SYNCHRONIZER = null;\n\nconst player = {\n  get primary() {\n    return this.webcams;\n  },\n  get screenshare() {\n    return PLAYERS[ID.SCREENSHARE];\n  },\n  get synchronizer() {\n    return SYNCHRONIZER;\n  },\n  get webcams() {\n    return PLAYERS[ID.WEBCAMS];\n  },\n  set screenshare(value) {\n    if (!PLAYERS[ID.SCREENSHARE]) PLAYERS[ID.SCREENSHARE] = value;\n\n    if (this.webcams) {\n      this.synchronizer = new Synchronizer(this.webcams, this.screenshare);\n    }\n  },\n  set synchronizer(value) {\n    if (!SYNCHRONIZER) SYNCHRONIZER = value;\n  },\n  set webcams(value) {\n    if (!PLAYERS[ID.WEBCAMS]) PLAYERS[ID.WEBCAMS] = value;\n\n    if (this.screenshare) {\n      this.synchronizer = new Synchronizer(this.webcams, this.screenshare);\n    }\n  },\n};\n\nexport default player;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Info from './info';\nimport Margin from './margin';\nimport player from 'utils/player';\nimport './index.scss';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  circle: PropTypes.bool,\n  icon: PropTypes.string,\n  initials: PropTypes.string,\n  name: PropTypes.string,\n  timestamp: PropTypes.number,\n};\n\nconst defaultProps = {\n  active: false,\n  children: null,\n  circle: false,\n  icon: '',\n  initials: '',\n  name: '',\n  timestamp: 0,\n};\n\nconst Message = ({\n  active,\n  children,\n  circle,\n  icon,\n  initials,\n  name,\n  timestamp,\n}) => {\n  const handleOnClick = () => {\n    player.primary.currentTime(timestamp);\n  };\n\n  return (\n    <div className=\"message\">\n      <Margin\n        active={active}\n        circle={circle}\n        icon={icon}\n        initials={initials}\n        name={name}\n        onClick={() => handleOnClick()}\n      />\n      <div className=\"data\">\n        <Info\n          active={active}\n          name={name}\n          timestamp={timestamp}\n        />\n        <div className={cx('text', { inactive: !active })}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMessage.propTypes = propTypes;\nMessage.defaultProps = defaultProps;\n\nexport default Message;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Text from './text';\nimport Message from 'components/chat/messages/message';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  hyperlink: PropTypes.bool,\n  initials: PropTypes.string,\n  name: PropTypes.string,\n  text: PropTypes.string,\n  timestamp: PropTypes.timestamp,\n};\n\nconst defaultProps = {\n  active: false,\n  hyperlink: false,\n  initials: '',\n  name: '',\n  text: '',\n  timestamp: 0,\n};\n\nconst User = ({\n  active,\n  hyperlink,\n  initials,\n  name,\n  text,\n  timestamp,\n}) => {\n\n  return (\n    <Message\n      active={active}\n      circle\n      initials={initials}\n      name={name}\n      timestamp={timestamp}\n    >\n      <Text\n        active={active}\n        hyperlink={hyperlink}\n        text={text}\n      />\n    </Message>\n  );\n};\n\nUser.propTypes = propTypes;\nUser.defaultProps = defaultProps;\n\n// Checks the message active state\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.active !== nextProps.active) return false;\n\n  return true;\n};\n\nexport default React.memo(User, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { getPollLabel } from 'utils/data';\nimport { isEmpty } from 'utils/data/validators';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  options: {\n    id: 'player.chat.message.poll.options',\n    description: 'Label for the poll message answer options',\n  },\n  yes: {\n    id: 'player.chat.message.poll.option.yes',\n    description: 'Label for poll option yes',\n  },\n  no: {\n    id: 'player.chat.message.poll.option.no',\n    description: 'Label for poll option no',\n  },\n  abstention: {\n    id: 'player.chat.message.poll.option.abstention',\n    description: 'Label for poll option abstention',\n  },\n  true: {\n    id: 'player.chat.message.poll.option.true',\n    description: 'Label for poll option true',\n  },\n  false: {\n    id: 'player.chat.message.poll.option.false',\n    description: 'Label for poll option false',\n  },\n});\n\nconst propTypes = {\n  answers: PropTypes.array,\n  type: PropTypes.string,\n};\n\nconst defaultProps = {\n  answers: [],\n  type: '',\n};\n\nconst Options = ({\n  answers,\n  type,\n}) => {\n  const intl = useIntl();\n\n  if (isEmpty(answers)) return null;\n\n  return (\n    <div className=\"poll-options\">\n      <div className=\"poll-label\">\n        {intl.formatMessage(intlMessages.options)}\n      </div>\n      {answers.map((item) => {\n        const {\n          id,\n          key,\n        } = item;\n\n        const label = getPollLabel(key, type);\n\n        return(\n          <div>\n            {id + 1}: {label ? intl.formatMessage(intlMessages[label]) : key}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nOptions.propTypes = propTypes;\nOptions.defaultProps = defaultProps;\n\nexport default Options;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { isEmpty } from 'utils/data/validators';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  question: {\n    id: 'player.chat.message.poll.question',\n    description: 'Label for the poll message question',\n  },\n});\n\nconst propTypes = { question: PropTypes.string };\n\nconst defaultProps = { question: '' };\n\nconst Question = ({ question }) => {\n  const intl = useIntl();\n\n  if (isEmpty(question)) return null;\n\n  return (\n    <div className=\"poll-question\">\n      <div className=\"poll-label\">\n        {intl.formatMessage(intlMessages.question)}\n      </div>\n      {question}\n    </div>\n  );\n};\n\nQuestion.propTypes = propTypes;\nQuestion.defaultProps = defaultProps;\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  getBar,\n  getPercentage,\n} from 'utils/data';\nimport { isEmpty } from 'utils/data/validators';\nimport './index.scss';\n\nconst propTypes = {\n  answers: PropTypes.array,\n  responders: PropTypes.number,\n};\n\nconst defaultProps = {\n  answers: [],\n  responders: 0,\n};\n\nconst Result = ({\n  answers,\n  responders,\n}) => {\n  if (isEmpty(answers)) return null;\n\n  return (\n    <div className=\"poll-result\">\n      {answers.map((item) => {\n        const {\n          id,\n          numVotes,\n        } = item;\n\n        const percentage = getPercentage(numVotes, responders);\n\n        return(\n          <div className=\"poll-label\">\n            {id + 1}: <span className=\"poll-bar\">{getBar(percentage)}</span> {percentage}%\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nResult.propTypes = propTypes;\nResult.defaultProps = defaultProps;\n\nexport default Result;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseMessage from 'components/chat/messages/message';\nimport './index.scss';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  icon: PropTypes.string,\n  name: PropTypes.string,\n  timestamp: PropTypes.number,\n};\n\nconst defaultProps = {\n  active: false,\n  children: null,\n  icon: '',\n  name: '',\n  timestamp: 0,\n};\n\nconst Message = ({\n  active,\n  children,\n  icon,\n  name,\n  timestamp,\n}) => {\n\n  return (\n    <BaseMessage\n      active={active}\n      icon={icon}\n      name={name}\n      timestamp={timestamp}\n    >\n      <div className=\"system-message-wrapper\">\n        {children}\n      </div>\n    </BaseMessage>\n  );\n};\n\nMessage.propTypes = propTypes;\nMessage.defaultProps = defaultProps;\n\nexport default Message;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Options from './options';\nimport Question from './question';\nimport Result from './result';\nimport SystemMessage from 'components/chat/messages/system/message';\nimport { ID } from 'utils/constants';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  name: {\n    id: 'player.chat.message.poll.name',\n    description: 'Label for the poll message name',\n  },\n});\n\nconst propTypes = {\n  active: PropTypes.bool,\n  answers: PropTypes.array,\n  question: PropTypes.string,\n  responders: PropTypes.number,\n  timestamp: PropTypes.number,\n  type: PropTypes.string,\n};\n\nconst defaultProps = {\n  active: false,\n  answers: [],\n  question: '',\n  responders: 0,\n  timestamp: 0,\n  type: '',\n};\n\nconst Poll = ({\n  active,\n  answers,\n  question,\n  responders,\n  timestamp,\n  type,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <SystemMessage\n      active={active}\n      icon={ID.POLLS}\n      name={intl.formatMessage(intlMessages.name)}\n      timestamp={timestamp}\n    >\n      <Question question={question} />\n      <Result\n        answers={answers}\n        responders={responders}\n      />\n      <Options\n        answers={answers}\n        type={type}\n      />\n    </SystemMessage>\n  );\n};\n\nPoll.propTypes = propTypes;\nPoll.defaultProps = defaultProps;\n\n// Checks the message active state\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.active !== nextProps.active) return false;\n\n  return true;\n};\n\nexport default React.memo(Poll, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'utils/data/validators';\nimport Linkify from 'linkifyjs/react';\nimport cx from 'classnames';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  url: PropTypes.string,\n};\n\nconst defaultProps = {\n  active: false,\n  url: '',\n};\n\nconst Url = ({\n  active,\n  url,\n}) => {\n  if (isEmpty(url)) return null;\n\n  const options = {\n    className: cx('linkified', { inactive: !active }),\n  };\n\n  return (\n    <Linkify options={options}>\n      {url}\n    </Linkify>\n  );\n};\n\nUrl.propTypes = propTypes;\nUrl.defaultProps = defaultProps;\n\nexport default Url;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Url from './url';\nimport SystemMessage from 'components/chat/messages/system/message';\nimport { ID } from 'utils/constants';\n\nconst intlMessages = defineMessages({\n  name: {\n    id: 'player.chat.message.video.name',\n    description: 'Label for the video message name',\n  },\n});\n\nconst propTypes = {\n  active: PropTypes.bool,\n  url: PropTypes.url,\n  timestamp: PropTypes.number,\n};\n\nconst defaultProps = {\n  active: false,\n  url: '',\n  timestamp: 0,\n};\n\nconst Video = ({\n  active,\n  url,\n  timestamp,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <SystemMessage\n      active={active}\n      icon={ID.VIDEOS}\n      name={intl.formatMessage(intlMessages.name)}\n      timestamp={timestamp}\n    >\n      <Url\n        active={active}\n        url={url}\n      />\n    </SystemMessage>\n  );\n};\n\nVideo.propTypes = propTypes;\nVideo.defaultProps = defaultProps;\n\n// Checks the message active state\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.active !== nextProps.active) return false;\n\n  return true;\n};\n\nexport default React.memo(Video, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UserMessage from './user';\nimport PollMessage from './system/poll';\nimport VideoMessage from './system/video';\nimport { ID } from 'utils/constants';\nimport { getMessageType } from 'utils/data';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst propTypes = {\n  currentIndex: PropTypes.number,\n  setRef: PropTypes.func,\n};\n\nconst defaultProps = {\n  currentIndex: 0,\n  setRef: () => {},\n};\n\nconst Messages = ({\n  currentIndex,\n  setRef,\n}) => {\n\n  return (\n    <div className=\"list\">\n      <div className=\"message-wrapper\">\n        {storage.messages.map((item, index) => {\n          const active = index <= currentIndex;\n          const { timestamp } = item;\n          const type = getMessageType(item);\n          switch (type) {\n            case ID.USERS:\n\n              return (\n                <span ref={node => setRef(node, index)}>\n                  <UserMessage\n                    active={active}\n                    hyperlink={item.hyperlink}\n                    initials={item.initials}\n                    name={item.name}\n                    text={item.message}\n                    timestamp={timestamp}\n                  />\n                </span>\n              );\n            case ID.POLLS:\n\n              return (\n                <span ref={node => setRef(node, index)}>\n                  <PollMessage\n                    active={active}\n                    answers={item.answers}\n                    question={item.question}\n                    responders={item.responders}\n                    timestamp={timestamp}\n                    type={item.type}\n                  />\n                </span>\n              );\n            case ID.VIDEOS:\n\n              return (\n                <span ref={node => setRef(node, index)}>\n                  <VideoMessage\n                    active={active}\n                    url={item.url}\n                    timestamp={timestamp}\n                    type={item.type}\n                  />\n                </span>\n              );\n            default:\n              return <span ref={node => setRef(node, index)} />;\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nMessages.propTypes = propTypes;\nMessages.defaultProps = defaultProps;\n\nexport default Messages;\n","import { useState, useEffect } from 'react';\nimport {\n  EVENTS,\n  ID,\n} from 'utils/constants';\nimport {\n  getCurrentContent,\n  getCurrentDataIndex,\n  getCurrentDataInterval,\n} from 'utils/data';\nimport { isEqual } from 'utils/data/validators';\n\nconst useCurrentContent = () => {\n  const [currentContent, setCurrentContent] = useState(ID.PRESENTATION);\n\n  useEffect(() => {\n    const handleTimeUpdate = (event) => {\n      const nextContent = getCurrentContent(event.detail.time);\n      if (currentContent !== nextContent) setCurrentContent(nextContent);\n    };\n\n    document.addEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    return () => {\n      document.removeEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    };\n  }, [currentContent]);\n\n  return currentContent;\n};\n\nconst useCurrentIndex = (data) => {\n  const [currentIndex, setCurrentIndex] = useState(-1);\n\n  useEffect(() => {\n    const handleTimeUpdate = (event) => {\n      const nextIndex = getCurrentDataIndex(data, event.detail.time);\n      if (currentIndex !== nextIndex) setCurrentIndex(nextIndex);\n    };\n\n    document.addEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    return () => {\n      document.removeEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    };\n  }, [currentIndex, data]);\n\n  return currentIndex;\n};\n\nconst useCurrentInterval = (data) => {\n  const [currentInterval, setCurrentInterval] = useState({ index: -1, interval: [] });\n\n  useEffect(() => {\n    const handleTimeUpdate = (event) => {\n      const nextIndex = getCurrentDataIndex(data, event.detail.time);\n      const sameIndex = currentInterval.index === nextIndex;\n\n      if (nextIndex !== -1) {\n        const nextInterval = getCurrentDataInterval(data[nextIndex].data, event.detail.time);\n        const sameInterval = isEqual(currentInterval.interval, nextInterval);\n        if (!sameIndex || !sameInterval) setCurrentInterval({ index: nextIndex, interval: nextInterval });\n      } else {\n        const sameInterval = isEqual(currentInterval, []);\n        if (!sameIndex || !sameInterval) setCurrentInterval({ index: -1, interval: [] });\n      }\n    };\n\n    document.addEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    return () => {\n      document.removeEventListener(EVENTS.TIME_UPDATE, handleTimeUpdate);\n    };\n  }, [currentInterval, data]);\n\n  return currentInterval;\n};\n\nexport {\n  useCurrentContent,\n  useCurrentIndex,\n  useCurrentInterval,\n};\n","import React, { useEffect, useRef } from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { chat as config } from 'config';\nimport Messages from './messages';\nimport { useCurrentIndex } from 'components/utils/hooks';\nimport {\n  ID,\n  POSITIONS,\n} from 'utils/constants';\nimport { handleAutoScroll } from 'utils/data/handlers';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.chat.wrapper.aria',\n    description: 'Aria label for the chat wrapper',\n  },\n});\n\nconst Chat = () => {\n  const intl = useIntl();\n  const currentIndex = useCurrentIndex(storage.messages);\n  const interaction = useRef(false);\n  const firstNode = useRef();\n  const currentNode = useRef();\n\n  const setRef = (node, index) => {\n    if (index === 0) {\n      firstNode.current = node;\n    }\n\n    if (index === currentIndex) {\n      currentNode.current = node;\n    }\n  };\n\n  useEffect(() => {\n    if (!interaction.current) {\n      if (config.scroll) {\n        handleAutoScroll(firstNode.current, currentNode.current, POSITIONS.TOP, config.align);\n      }\n    }\n  });\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      aria-live=\"polite\"\n      className=\"chat-wrapper\"\n      id={ID.CHAT}\n      onMouseEnter={() => interaction.current = true}\n      onMouseLeave={() => interaction.current = false}\n      tabIndex=\"0\"\n    >\n      <Messages\n        currentIndex={currentIndex}\n        setRef={(node, index) => setRef(node, index)}\n      />\n    </div>\n  );\n};\n\nconst areEqual = () => true;\n\nexport default React.memo(Chat, areEqual);\n","import React from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { ID } from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.notes.wrapper.aria',\n    description: 'Aria label for the notes wrapper',\n  },\n});\n\nconst Notes = () => {\n  const intl = useIntl();\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className=\"notes-wrapper\"\n      id={ID.NOTES}\n      tabIndex=\"0\"\n    >\n      <div className=\"notes\">\n        <div dangerouslySetInnerHTML={{ __html: storage.notes }} />\n      </div>\n    </div>\n  );\n};\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Notes, areEqual);\n","import React from 'react';\nimport Chat from 'components/chat';\nimport Notes from 'components/notes';\nimport { ID } from 'utils/constants';\n\nconst Content = ({ current }) => {\n  switch (current) {\n    case ID.CHAT:\n\n      return <Chat />;\n    case ID.NOTES:\n\n      return <Notes />;\n    default:\n\n      return null;\n  }\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.current !== nextProps.current) return false;\n\n  return true;\n};\n\nexport default React.memo(Content, areEqual);\n","import { controls } from 'config';\nimport { LAYOUT } from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport { isContentVisible } from 'utils/data/validators';\n\nlet MODE = null;\n\nconst layout = {\n  get content() {\n    return storage.content;\n  },\n  get mode() {\n    return MODE;\n  },\n  set mode(value) {\n    MODE = value;\n  },\n  get control() {\n    const { DISABLED } = LAYOUT;\n\n    let control = true;\n    switch (this.mode) {\n      case DISABLED:\n        control = false;\n        break;\n      default:\n    }\n\n    return control;\n  },\n  get section() {\n    const {\n      CONTENT,\n      MEDIA,\n    } = LAYOUT;\n\n    let section = true;\n    switch (this.mode) {\n      case CONTENT:\n        section = false;\n        break;\n      case MEDIA:\n        section = false;\n        break;\n      default:\n    }\n\n    return section;\n  },\n  get swap() {\n    const {\n      CONTENT,\n      MEDIA,\n      SWAPPED,\n    } = LAYOUT;\n\n    let swap = false;\n    switch (this.mode) {\n      case CONTENT:\n        swap = false;\n        break;\n      case MEDIA:\n      case SWAPPED:\n        swap = true;\n        break;\n      default:\n    }\n\n    return swap;\n  },\n  get screenshare() {\n    return this.content.screenshare;\n  },\n  get single() {\n    return !this.content.presentation && !this.content.screenshare;\n  },\n  hasFullscreenButton: function (content, swap) {\n    if (!this.control || !controls.fullscreen) return false;\n\n    if (!isContentVisible(content, swap || this.single)) return false;\n\n    return true;\n  },\n};\n\nexport default layout;\n","import React from 'react';\nimport cx from 'classnames';\nimport Icon from 'components/utils/icon';\nimport { ID } from 'utils/constants';\nimport layout from 'utils/layout';\nimport './index.scss';\n\nconst APPLICATIONS = [\n  ID.CHAT,\n  ID.NOTES,\n];\n\nconst Control = ({\n  current,\n  toggleApplication,\n}) => {\n  if (!layout.control) return null;\n\n  return (\n    <div className=\"application-control\">\n      {APPLICATIONS.map(application => {\n        const active = current === application;\n\n        return (\n          <div\n            className={cx('application-icon', { inactive: !active })}\n            onClick={() => active ? null : toggleApplication(application)}\n          >\n            <Icon name={application} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.current === nextProps.current;\n};\n\nexport default React.memo(Control, areEqual);\n","import React, { useState } from 'react';\nimport Content from './content';\nimport Control from './control';\nimport { ID } from 'utils/constants';\nimport './index.scss';\n\nconst DEFAULT = ID.CHAT;\n\nconst Application = () => {\n  const [current, setCurrent] = useState(DEFAULT);\n\n  const toggleApplication = (application) => {\n    if (current !== application) setCurrent(application);\n  };\n\n  return (\n    <div className=\"application\">\n      <Control\n        current={current}\n        toggleApplication={toggleApplication}\n      />\n      <Content current={current} />\n    </div>\n  );\n};\n\nconst areEqual = () => true;\n\nexport default React.memo(Application, areEqual);\n","import React from 'react';\nimport { useCurrentIndex } from 'components/utils/hooks';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst getCursor = (index, viewBox) => {\n  const inactive = {\n    x: -1,\n    y: -1,\n  }\n\n  if (index === -1) return inactive;\n\n  const currentData = storage.cursor[index];\n  if (currentData.x === -1 && currentData.y === -1) return inactive;\n\n  return {\n    x: viewBox.x + (currentData.x * viewBox.width),\n    y: viewBox.y + (currentData.y * viewBox.height),\n  };\n};\n\nconst Cursor = ({ viewBox }) => {\n  const currentIndex = useCurrentIndex(storage.cursor);\n  const { x, y } = getCursor(currentIndex, viewBox);\n\n  if (x === -1 || y === -1) return null;\n\n  return (\n    <circle\n      className=\"cursor\"\n      style={{ cx: x, cy: y }}\n    />\n  );\n};\n\nexport default Cursor;\n","import React from 'react';\nimport { ID } from 'utils/constants';\nimport { buildFileURL } from 'utils/data';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst Proxy = ({\n  id,\n  height,\n  width,\n}) => {\n  const thumbnail = storage.thumbnails.find(thumbnails => id === thumbnails.id);\n  if (!thumbnail) return null;\n\n  const {\n    alt,\n    src,\n  } = thumbnail;\n\n  if (src === ID.SCREENSHARE) return null;\n\n  return (\n    <foreignObject\n      height={height}\n      x={0}\n      width={width}\n      y={0}\n    >\n      <img\n        alt={alt}\n        className=\"proxy\"\n        src={buildFileURL(src)}\n      />\n    </foreignObject>\n  );\n};\n\nexport default Proxy;\n","import React from 'react';\nimport Proxy from './proxy';\nimport { useCurrentIndex } from 'components/utils/hooks';\nimport { buildFileURL } from 'utils/data';\nimport storage from 'utils/data/storage';\n\nconst Slide = () => {\n  const currentIndex = useCurrentIndex(storage.slides);\n  if (currentIndex === -1) return null;\n\n  const {\n    height,\n    id,\n    src,\n    width,\n  } = storage.slides[currentIndex];\n\n  return (\n    <g>\n      <Proxy\n        id={id}\n        height={height}\n        width={width}\n      />\n      <image\n        height={height}\n        href={buildFileURL(src)}\n        x={0}\n        width={width}\n        y={0}\n      />\n    </g>\n  );\n};\n\nconst areEqual = () => true;\n\nexport default React.memo(Slide, areEqual);\n","import React from 'react';\nimport { buildFileURL } from 'utils/data';\n\nconst Poll = ({\n  data,\n  style,\n}) => {\n  const {\n    image,\n    rect,\n  } = data;\n\n  // TODO: Better adapt for old versions\n  if (rect) {\n    // BigBlueButton v2.2 or lower\n    return (\n      <g style={style}>\n        <rect\n          fill={rect.fill}\n          height={rect.height}\n          stroke={rect.stroke}\n          strokeWidth={rect['stroke-width']}\n          width={rect.width}\n          x={rect.x}\n          y={rect.y}\n        />\n        <image\n          height={image.height}\n          transform={image.transform}\n          width={image.width}\n          x={image.x}\n          href={buildFileURL(image['xlink:href'])}\n          y={image.y}\n        />\n      </g>\n    );\n  } else {\n    // BigBlueButton v2.3 or higher\n     return (\n      <g style={style}>\n        <image\n          height={image.height}\n          width={image.width}\n          x={image.x}\n          href={buildFileURL(image['xlink:href'])}\n          y={image.y}\n        />\n      </g>\n    );\n  }\n};\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Poll, areEqual);\n","import React from 'react';\nimport Poll from './poll';\nimport { useCurrentInterval } from 'components/utils/hooks';\nimport { SHAPES } from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport { isEmpty } from 'utils/data/validators';\nimport logger from 'utils/logger';\n\nconst getCanvasData = (index) => storage.canvases[index].data;\n\nconst Canvas = () => {\n  const {\n    index,\n    interval,\n  }= useCurrentInterval(storage.canvases);\n\n  if (index === -1) return null;\n\n  if (isEmpty(interval)) return null;\n\n  const canvas = [];\n  for (let i = 0; i < interval.length; i++) {\n    if (!interval[i]) continue;\n\n    const canvasData = getCanvasData(index);\n\n    const {\n      id,\n      shape,\n      style,\n    } = canvasData[i];\n\n    const j = i + 1;\n    let intermediate = false;\n    if (j < interval.length) {\n      intermediate = canvasData[j].id === id;\n    }\n\n    if (intermediate) continue;\n\n    const {\n      data,\n      type,\n    } = shape;\n\n    switch (type) {\n      case SHAPES.CIRCLE:\n        canvas.push(\n          <circle\n            style={style}\n            cx={data.cx}\n            cy={data.cy}\n            r={data.r}\n          />\n        );\n        break;\n      case SHAPES.LINE:\n        canvas.push(\n          <line\n            style={style}\n            x1={data.x1}\n            y1={data.y1}\n            x2={data.x2}\n            y2={data.y2}\n          />\n        );\n        break;\n      case SHAPES.PATH:\n        canvas.push(\n          <path\n            style={style}\n            d={data.d}\n          />\n        );\n        break;\n      case SHAPES.POLL:\n        canvas.push(\n          <Poll\n            data={data}\n            key={id}\n            style={style}\n          />\n        );\n        break;\n      case SHAPES.POLYGON:\n        canvas.push(\n          <polygon\n            style={style}\n            points={data.points}\n          />\n        );\n        break;\n      case SHAPES.POLYLINE:\n        canvas.push(\n          <polyline\n            style={style}\n            points={data.points}\n          />\n        );\n        break;\n      case SHAPES.TEXT:\n        canvas.push(\n          <foreignObject\n            style={style}\n            height={data.height}\n            width={data.width}\n            x={data.x}\n            y={data.y}\n          >\n            <div xmlns=\"http://www.w3.org/1999/xhtml\">\n              {data.text.split('\\r').map(line => <span>{line}<br /></span>)}\n            </div>\n          </foreignObject>\n        );\n        break;\n      default:\n        logger.debug('unhandled', type);\n    }\n  }\n\n  return (\n    <g>\n      {canvas}\n    </g>\n  );\n};\n\nexport default Canvas;\n","import React from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport cx from 'classnames';\nimport Cursor from './cursor';\nimport Slide from './slide';\nimport Canvas from './canvas';\nimport {\n  useCurrentContent,\n  useCurrentIndex,\n} from 'components/utils/hooks';\nimport { ID } from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.presentation.wrapper.aria',\n    description: 'Aria label for the presentation wrapper',\n  },\n});\n\nconst buildViewBoxAttr = (viewBox) => {\n  const {\n    height,\n    x,\n    width,\n    y,\n  } = viewBox;\n\n  return `${x} ${y} ${width} ${height}`;\n};\n\nconst getViewBox = (index) => {\n  const inactive = {\n    height: 0,\n    x: 0,\n    width: 0,\n    y: 0,\n  };\n\n  if (index === -1) return inactive;\n\n  const currentData = storage.panzooms[index];\n\n  return {\n    height: currentData.height,\n    x: currentData.x,\n    width: currentData.width,\n    y: currentData.y,\n  };\n};\n\nconst Presentation = () => {\n  const intl = useIntl();\n  const currentContent = useCurrentContent();\n  const currentPanzoomIndex = useCurrentIndex(storage.panzooms);\n  const viewBox = getViewBox(currentPanzoomIndex);\n\n  const started = currentPanzoomIndex !== -1;\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className={cx('presentation-wrapper', { inactive: currentContent !== ID.PRESENTATION })}\n      id={ID.PRESENTATION}\n    >\n      <div className={cx('presentation', { logo: !started })}>\n        <svg\n          viewBox={buildViewBoxAttr(viewBox)}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        >\n          <defs>\n            <clipPath id=\"viewBox\">\n              <rect\n                height={viewBox.height}\n                x={viewBox.x}\n                width={viewBox.width}\n                y={viewBox.y}\n              />\n            </clipPath>\n          </defs>\n          <g clipPath=\"url(#viewBox)\">\n            <Slide />\n            <Canvas />\n            <Cursor viewBox={viewBox} />\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nconst areEqual = () => true;\n\nexport default React.memo(Presentation, areEqual);\n","import React, { useEffect, useRef } from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport cx from 'classnames';\nimport videojs from 'video.js/core.es.js';\nimport { useCurrentContent } from 'components/utils/hooks';\nimport { ID } from 'utils/constants';\nimport { buildFileURL } from 'utils/data';\nimport logger from 'utils/logger';\nimport storage from 'utils/data/storage';\nimport player from 'utils/player';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.screenshare.wrapper.aria',\n    description: 'Aria label for the screenshare wrapper',\n  },\n});\n\nconst buildSources = () => {\n  return [\n    {\n      src: buildFileURL('deskshare/deskshare.mp4'),\n      type: 'video/mp4',\n    }, {\n      src: buildFileURL('deskshare/deskshare.webm'),\n      type: 'video/webm',\n    },\n  ].filter(source => storage.media.find(m => source.type.includes(m)));\n};\n\nconst buildOptions = (sources) => {\n  return {\n    controls: false,\n    fill: true,\n    sources: sources.current,\n  };\n};\n\nconst Screenshare = () => {\n  const intl = useIntl();\n  const currentContent = useCurrentContent();\n  const sources = useRef(buildSources());\n  const element = useRef();\n\n  useEffect(() => {\n    if (!player.screenshare) {\n      const video = element.current;\n      if (!video) return;\n\n      player.screenshare = videojs(video, buildOptions(sources), () => {});\n      logger.debug(ID.SCREENSHARE, 'mounted');\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (player.screenshare) {\n        player.screenshare.dispose();\n        player.screenshare = null;\n        logger.debug(ID.SCREENSHARE, 'unmounted');\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className={cx('screenshare-wrapper', { inactive: currentContent !== ID.SCREENSHARE })}\n      id={ID.SCREENSHARE}\n    >\n      <div data-vjs-player>\n        <video\n          className=\"video-js\"\n          playsInline\n          preload=\"auto\"\n          ref={element}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst areEqual = () => true;\n\nexport default React.memo(Screenshare, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from 'components/utils/icon';\nimport { ID } from 'utils/constants';\nimport { buildFileURL } from 'utils/data';\nimport './index.scss';\n\nconst propTypes = {\n  alt: PropTypes.string,\n  src: PropTypes.string,\n};\n\nconst defaultProps = {\n  alt: '',\n  src: '',\n};\n\nconst Image = ({\n  alt,\n  src,\n}) => {\n  const screenshare = src === ID.SCREENSHARE;\n\n  if (screenshare) {\n    return (\n      <div className={cx('thumbnail-image', { screenshare })}>\n        <Icon name={ID.SCREENSHARE} />\n      </div>\n    );\n  }\n\n  const logo = src.includes('logo');\n\n  return (\n    <img\n      alt={alt}\n      className={cx('thumbnail-image', { logo })}\n      src={buildFileURL(src)}\n    />\n  );\n};\n\nImage.propTypes = propTypes;\nImage.defaultProps = defaultProps;\n\nexport default Image;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Image from './image';\nimport './index.scss';\n\nconst propTypes = {\n  alt: PropTypes.string,\n  index: PropTypes.number,\n  src: PropTypes.string,\n};\n\nconst defaultProps = {\n  alt: '',\n  index: 0,\n  src: '',\n};\n\nconst Thumbnail = ({\n  alt,\n  index,\n  src,\n}) => {\n\n  return (\n    <div className=\"thumbnail\">\n      <Image\n        alt={alt}\n        src={src}\n      />\n      <div className=\"thumbnail-index\">\n        {index + 1}\n      </div>\n    </div>\n  )\n};\n\nThumbnail.propTypes = propTypes;\nThumbnail.defaultProps = defaultProps;\n\nexport default Thumbnail;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Thumbnail from './thumbnail';\nimport { handleOnEnterPress } from 'utils/data/handlers';\nimport player from 'utils/player';\nimport './index.scss';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  index: PropTypes.number,\n  interactive: PropTypes.bool,\n  item: PropTypes.object,\n  setRef: PropTypes.func,\n};\n\nconst defaultProps = {\n  active: false,\n  index: 0,\n  interactive: false,\n  item: {},\n  setRef: () => {},\n};\n\nconst Item = ({\n  active,\n  index,\n  interactive,\n  item,\n  setRef,\n}) => {\n  if (!interactive) {\n\n    return (\n      <div\n        className=\"thumbnail-wrapper\"\n        tabIndex=\"0\"\n      >\n        <Thumbnail\n          alt={item.alt}\n          index={index}\n          src={item.src}\n        />\n      </div>\n    );\n  }\n\n  const handleOnClick = () => {\n    if (interactive) player.primary.currentTime(item.timestamp);\n  };\n\n  return (\n    <div\n      className={cx('thumbnail-wrapper', { active, interactive })}\n      onClick={() => handleOnClick()}\n      onKeyPress={event => handleOnEnterPress(event, handleOnClick)}\n      ref={node => setRef(node, index)}\n      tabIndex=\"0\"\n    >\n      <Thumbnail\n        alt={item.alt}\n        index={index}\n        src={item.src}\n      />\n    </div>\n  );\n};\n\nItem.propTypes = propTypes;\nItem.defaultProps = defaultProps;\n\nexport default Item;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Icon from 'components/utils/icon';\nimport './index.scss';\n\nconst DEFAULT = 'default';\nconst SOLID = 'solid';\n\nconst propTypes = {\n  active: PropTypes.bool,\n  aria: PropTypes.string,\n  circle: PropTypes.bool,\n  disabled: PropTypes.bool,\n  handleOnClick: PropTypes.func,\n  icon: PropTypes.string,\n  type: PropTypes.string,\n};\n\nconst defaultProps = {\n  active: false,\n  aria: '',\n  circle: false,\n  disabled: false,\n  handleOnClick: () => {},\n  icon: '',\n  type: DEFAULT,\n};\n\nconst Button = ({\n  active,\n  aria,\n  circle,\n  disabled,\n  handleOnClick,\n  icon,\n  type,\n}) => {\n  const solid = type === SOLID;\n\n  const style = {\n    default: !solid && !disabled,\n    solid: (solid || active) && !disabled,\n    circle,\n    disabled,\n  };\n\n  return (\n    <div className=\"button-wrapper\">\n      <button\n        aria-label={aria}\n        className={cx('button', style)}\n        disabled={disabled}\n        onClick={() => handleOnClick()}\n      >\n        <Icon name={icon} />\n      </button>\n    </div>\n  );\n};\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport { isEmpty } from 'utils/data/validators';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  clear: {\n    id: 'button.clear.aria',\n    description: 'Aria label for the clear button',\n  },\n});\n\nconst propTypes = {\n  interactive: PropTypes.bool,\n  onClick: PropTypes.func,\n  search: PropTypes.array,\n};\n\nconst defaultProps = {\n  interactive: false,\n  onClick: () => {},\n  search: [],\n};\n\nconst Clear = ({\n  interactive,\n  onClick,\n  search,\n}) => {\n  const intl = useIntl();\n\n  if (!interactive) return null;\n\n  if (isEmpty(search)) return null;\n\n  return (\n    <div className=\"clear-button\">\n      <Button\n        aria={intl.formatMessage(intlMessages.clear)}\n        handleOnClick={onClick}\n        icon=\"close\"\n        type=\"solid\"\n      />\n    </div>\n  );\n};\n\nClear.propTypes = propTypes;\nClear.defaultProps = defaultProps;\n\nexport default Clear;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Item from './item';\nimport ClearButton from './buttons/clear';\nimport { useCurrentIndex } from 'components/utils/hooks';\nimport { thumbnails as config } from 'config';\nimport {\n  ID,\n  POSITIONS,\n} from 'utils/constants';\nimport { handleAutoScroll } from 'utils/data/handlers';\nimport storage from 'utils/data/storage';\nimport {\n  isEmpty,\n  isEqual,\n} from 'utils/data/validators';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.thumbnails.wrapper.aria',\n    description: 'Aria label for the thumbnails wrapper',\n  },\n});\n\nconst propTypes = {\n  handleSearch: PropTypes.func,\n  interactive: PropTypes.bool,\n  search: PropTypes.array,\n};\n\nconst defaultProps = {\n  handleSearch: () => {},\n  interactive: false,\n  search: [],\n};\n\nconst Thumbnails = ({\n  handleSearch,\n  interactive,\n  search,\n}) => {\n  const currentIndex = useCurrentIndex(storage.thumbnails);\n  const interaction = useRef(false);\n  const firstNode = useRef();\n  const currentNode = useRef();\n\n  const intl = useIntl();\n\n  const setRef = (node, index) => {\n    if (index === 0) {\n      firstNode.current = node;\n    }\n\n    if (index === currentIndex) {\n      currentNode.current = node;\n    }\n  };\n\n  const isFiltered = (index) => {\n    if (interactive) {\n      return !isEmpty(search) && !search.includes(index);\n    } else {\n      return !search.includes(index);\n    }\n  }\n\n  useEffect(() => {\n    if (!interaction.current) {\n      if (config.scroll) {\n        handleAutoScroll(firstNode.current, currentNode.current, POSITIONS.LEFT, config.align);\n      }\n    }\n  });\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className=\"thumbnails-wrapper\"\n      id={ID.THUMBNAILS}\n      onMouseEnter={() => interaction.current = true}\n      onMouseLeave={() => interaction.current = false}\n      tabIndex=\"0\"\n    >\n      {storage.thumbnails.reduce((result, item, index) => {\n        if (!isFiltered(index)) {\n          const active = index === currentIndex;\n\n          result.push(\n            <Item\n              active={active}\n              index={index}\n              interactive={interactive}\n              item={item}\n              setRef={setRef}\n            />\n          );\n        }\n\n        return result;\n      }, [])}\n      <ClearButton\n        interactive={interactive}\n        onClick={() => handleSearch([])}\n        search={search}\n      />\n    </div>\n  );\n};\n\nThumbnails.propTypes = propTypes;\nThumbnails.defaultProps = defaultProps;\n\nconst areEqual = (prevProps, nextProps) => {\n  if (!isEqual(prevProps.search, nextProps.search)) return false;\n\n  return true;\n};\n\nexport default React.memo(Thumbnails, areEqual);\n","import React from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport layout from 'utils/layout';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  fullscreen: {\n    id: 'button.fullscreen.aria',\n    description: 'Aria label for the fullscreen button',\n  },\n  restore: {\n    id: 'button.restore.aria',\n    description: 'Aria label for the restore button',\n  },\n});\n\nconst Fullscreen = ({\n  content,\n  fullscreen,\n  swap,\n  toggleFullscreen,\n}) => {\n  const intl = useIntl();\n\n  if (!layout.hasFullscreenButton(content, swap)) return null;\n\n  const aria = fullscreen\n    ? intl.formatMessage(intlMessages.restore)\n    : intl.formatMessage(intlMessages.fullscreen)\n  ;\n\n  const icon = fullscreen ? 'restore' : 'fullscreen';\n\n  return (\n    <div className=\"fullscreen-button\">\n      <Button\n        aria={aria}\n        handleOnClick={() => toggleFullscreen()}\n        icon={icon}\n        type=\"solid\"\n      />\n    </div>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.content !== nextProps.content) return false;\n\n  if (prevProps.fullscreen !== nextProps.fullscreen) return false;\n\n  if (prevProps.swap !== nextProps.swap) return false;\n\n  return true;\n};\n\nexport default React.memo(Fullscreen, areEqual);\n","import React from 'react';\nimport cx from 'classnames';\nimport Presentation from 'components/presentation';\nimport Screenshare from 'components/screenshare';\nimport Thumbnails from 'components/thumbnails';\nimport FullscreenButton from 'components/player/buttons/fullscreen';\nimport { LAYOUT } from 'utils/constants';\nimport { isEqual } from 'utils/data/validators';\nimport layout from 'utils/layout';\nimport './index.scss';\n\nconst Content = ({\n  fullscreen,\n  handleSearch,\n  search,\n  swap,\n  toggleFullscreen,\n}) => {\n  if (layout.single) return null;\n\n  return (\n    <div className={cx('content', { 'swapped-content': swap })}>\n      <FullscreenButton\n        content={LAYOUT.CONTENT}\n        fullscreen={fullscreen}\n        swap={swap}\n        toggleFullscreen={toggleFullscreen}\n      />\n      <div className=\"top-content\">\n        <Presentation />\n        {layout.screenshare ? <Screenshare /> : null}\n      </div>\n      <div className={cx('bottom-content', { 'inactive': fullscreen })}>\n        <Thumbnails\n          handleSearch={handleSearch}\n          interactive\n          search={search}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.fullscreen !== nextProps.fullscreen) return false;\n\n  if (prevProps.swap !== nextProps.swap) return false;\n\n  if (!isEqual(prevProps.search, nextProps.search)) return false;\n\n  return true;\n};\n\nexport default React.memo(Content, areEqual);\n","import React, { useEffect, useRef } from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport videojs from 'video.js/core.es.js';\nimport { player as config } from 'config';\nimport {\n  EVENTS,\n  ID,\n} from 'utils/constants';\nimport { buildFileURL } from 'utils/data';\nimport logger from 'utils/logger';\nimport { getTime } from 'utils/params';\nimport storage from 'utils/data/storage';\nimport player from 'utils/player';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.webcams.wrapper.aria',\n    description: 'Aria label for the webcams wrapper',\n  },\n});\n\nconst buildSources = () => {\n  if (storage.fallback) {\n    return [\n      {\n        src: buildFileURL('audio/audio.webm'),\n        type: 'audio/webm',\n      },\n    ];\n  }\n\n  return [\n    {\n      src: buildFileURL('video/webcams.mp4'),\n      type: 'video/mp4',\n    }, {\n      src: buildFileURL('video/webcams.webm'),\n      type: 'video/webm',\n    },\n  ].filter(source => storage.media.find(m => source.type.includes(m)));\n};\n\nconst buildTracks = () => {\n  return storage.captions.map(lang => {\n    const {\n      locale,\n      localeName,\n    } = lang;\n\n    return {\n      kind: 'captions',\n      src: buildFileURL(`caption_${locale}.vtt`),\n      srclang: locale,\n      label: localeName,\n    };\n  });\n};\n\nconst buildOptions = (sources, tracks) => {\n  return {\n    controlBar: {\n      fullscreenToggle: false,\n      pictureInPictureToggle: false,\n      volumePanel: {\n        inline: false,\n        vertical: true,\n      },\n    },\n    controls: true,\n    fill: true,\n    inactivityTimeout: 0,\n    playbackRates: config.rates,\n    sources: sources.current,\n    tracks: tracks.current,\n  };\n};\n\nconst dispatchTimeUpdate = (time) => {\n  const event = new CustomEvent(EVENTS.TIME_UPDATE, { detail: { time }});\n  document.dispatchEvent(event);\n};\n\nconst Webcams = () => {\n  const intl = useIntl();\n  const sources = useRef(buildSources());\n  const tracks = useRef(buildTracks());\n  const element = useRef();\n  const interval = useRef();\n\n  useEffect(() => {\n    if (!player.webcams) {\n      const video = element.current;\n      if (!video) return;\n\n      player.webcams = videojs(video, buildOptions(sources, tracks), () => {\n        player.webcams.on('play', () => {\n          interval.current = setInterval(() => {\n            const currentTime = player.webcams.currentTime();\n            dispatchTimeUpdate(currentTime);\n          }, 1000 / config.rps);\n        });\n\n        player.webcams.on('pause', () => clearInterval(interval.current));\n\n        const time = getTime();\n        if (time) {\n          player.webcams.on('loadedmetadata', () => {\n            const duration = player.webcams.duration();\n            if (time < duration) {\n              player.webcams.currentTime(time);\n            }\n          });\n        }\n      });\n      logger.debug(ID.WEBCAMS, 'mounted');\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (player.webcams) {\n        player.webcams.dispose();\n        player.webcams = null;\n        logger.debug(ID.WEBCAMS, 'unmounted');\n      }\n    };\n  }, []);\n\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className=\"webcams-wrapper\"\n      id={ID.WEBCAMS}\n    >\n      <div data-vjs-player>\n        <video\n          className=\"video-js\"\n          playsInline\n          preload=\"auto\"\n          ref={element}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Webcams, areEqual);\n","import React from 'react';\nimport cx from 'classnames';\nimport FullscreenButton from 'components/player/buttons/fullscreen';\nimport Webcams from 'components/webcams';\nimport { LAYOUT } from 'utils/constants';\nimport layout from 'utils/layout';\nimport './index.scss';\n\nconst Media = ({\n  fullscreen,\n  swap,\n  toggleFullscreen,\n}) => {\n\n  return (\n    <div className={cx('media', { 'swapped-media': swap || layout.single })}>\n      <FullscreenButton\n        content={LAYOUT.MEDIA}\n        fullscreen={fullscreen}\n        swap={swap}\n        toggleFullscreen={toggleFullscreen}\n      />\n      <Webcams />\n    </div>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.fullscreen !== nextProps.fullscreen) return false;\n\n  if (prevProps.swap !== nextProps.swap) return false;\n\n  return true;\n};\n\nexport default React.memo(Media, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from 'components/utils/icon';\nimport './index.scss';\n\nconst propTypes = {\n  icon: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.string,\n  ]),\n};\n\nconst defaultProps = {\n  icon: '',\n  value: false,\n};\n\nconst Item = ({\n  icon,\n  value,\n}) => {\n  let element;\n  if (typeof value === 'boolean') {\n    element = <Icon name={value ? 'check' : 'close'} />;\n  } else {\n    element = value;\n  }\n\n  return (\n    <div className=\"item\">\n      <Icon name={icon} />\n      {element}\n    </div>\n  );\n};\n\nItem.propTypes = propTypes;\nItem.defaultProps = defaultProps;\n\nexport default Item;\n","import React from 'react';\nimport Item from './item';\nimport {\n  CONTENT,\n  ID,\n} from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst Body = () => {\n\n  return (\n    <div className=\"about-body\">\n      <Item\n        icon={ID.USERS}\n        key={ID.USERS}\n        value={storage.metadata.participants}\n      />\n      {CONTENT.map((item) => (\n        <Item\n          icon={item}\n          key={item}\n          value={storage.content[item]}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Body;\n","import React from 'react';\nimport { BUILD } from 'utils/constants';\nimport './index.scss';\n\nconst Footer = () => {\n  return (\n    <div className=\"about-footer\">\n      {BUILD ? (\n        <span className=\"revision\">\n          {BUILD}\n        </span>\n      ) : (\n        null\n      )}\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport {\n  FormattedDate,\n  FormattedTime,\n} from 'react-intl';\nimport storage from 'utils/data/storage';\nimport './index.scss';\n\nconst Header = () => {\n  const {\n    end,\n    name,\n    start,\n  } = storage.metadata;\n\n  const subtitle = [];\n  subtitle.push(\n    <FormattedDate\n      value={new Date(start)}\n      day=\"numeric\"\n      month=\"long\"\n      year=\"numeric\"\n    />\n  );\n\n  subtitle.push(<FormattedTime value={new Date(start)} />);\n  subtitle.push(<FormattedTime value={new Date(end)} />);\n\n  return (\n    <div className=\"about-header\">\n      <div className=\"title\">\n        {name}\n      </div>\n      <div className=\"subtitle\">\n        {subtitle.map(s => <div className=\"item\">{s}</div>)}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  close: {\n    id: 'button.close.aria',\n    description: 'Aria label for the close button',\n  },\n});\n\nconst propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  onClose: PropTypes.func,\n};\n\nconst defaultProps = {\n  children: null,\n  onClose: () => {},\n};\n\nconst Modal = ({\n  children,\n  onClose,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"modal-wrapper\">\n      <div className=\"modal\">\n        <div className=\"modal-control\">\n          <Button\n            aria={intl.formatMessage(intlMessages.close)}\n            circle\n            handleOnClick={onClose}\n            icon=\"close\"\n          />\n        </div>\n        <div className=\"modal-content\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = propTypes;\nModal.defaultProps = defaultProps;\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Body from './body';\nimport Footer from './footer';\nimport Header from './header';\nimport Modal from 'components/utils/modal';\nimport './index.scss';\n\nconst propTypes = { handleClose: PropTypes.func };\n\nconst defaultProps = { handleClose: () => {} };\n\nconst About = ({ handleClose }) => {\n\n  return (\n    <Modal onClose={handleClose}>\n      <Header />\n      <Body />\n      <Footer />\n    </Modal>\n  );\n};\n\nAbout.propTypes = propTypes;\nAbout.defaultProps = defaultProps;\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(About, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Thumbnails from 'components/thumbnails';\nimport { search as config } from 'config';\nimport './index.scss';\n\nconst propTypes = {\n  handleOnChange: PropTypes.func,\n  search: PropTypes.array,\n};\n\nconst defaultProps = {\n  handleOnChange: () => {},\n  search: [],\n};\n\nconst Body = ({\n  handleOnChange,\n  search,\n}) => {\n\n  return (\n    <div className=\"search-body\">\n      <input\n        maxLength={config.length.max}\n        minLength={config.length.min}\n        onChange={(event) => handleOnChange(event)}\n        type=\"text\"\n      />\n      <div className={cx('result', { active: true })}>\n        <Thumbnails\n          currentDataIndex={0}\n          handleSearch={null}\n          player={null}\n          search={search}\n        />\n      </div>\n    </div>\n  );\n};\n\nBody.propTypes = propTypes;\nBody.defaultProps = defaultProps;\n\nexport default Body;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  search: {\n    id: 'button.search.aria',\n    description: 'Aria label for the search button',\n  },\n});\n\nconst propTypes = {\n  disabled: PropTypes.bool,\n  handleOnClick: PropTypes.func,\n};\n\nconst defaultProps = {\n  disabled: false,\n  handleOnClick: () => {},\n};\n\nconst Footer = ({\n  disabled,\n  handleOnClick,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"search-footer\">\n      <Button\n        aria={intl.formatMessage(intlMessages.search)}\n        disabled={disabled}\n        handleOnClick={(event) => handleOnClick(event)}\n        icon=\"search\"\n        type=\"solid\"\n      />\n    </div>\n  );\n};\n\nFooter.propTypes = propTypes;\nFooter.defaultProps = defaultProps;\n\nexport default Footer;\n","import React from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  title: {\n    id: 'player.search.modal.title',\n    description: 'Label for the search modal title',\n  },\n  subtitle: {\n    id: 'player.search.modal.subtitle',\n    description: 'Label for the search modal subtitle',\n  },\n});\n\nconst Header = () => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"search-header\">\n      <div className=\"title\">\n        {intl.formatMessage(intlMessages.title)}\n      </div>\n      <div className=\"subtitle\">\n        {intl.formatMessage(intlMessages.subtitle)}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { getCurrentDataIndex } from 'utils/data';\nimport storage from 'utils/data/storage';\nimport player from 'utils/player';\n\nconst search = (text, thumbnails) => {\n  const result = [];\n\n  const value = text.toLowerCase();\n  thumbnails.forEach((thumbnail, index) => {\n    const { alt } = thumbnail;\n\n    if (alt.toLowerCase().indexOf(value) !== -1) {\n      result.push(index);\n    }\n  });\n\n  return result;\n};\n\nconst seek = (seconds) => {\n  const min = 0;\n  const max = player.primary.duration();\n  const time = player.primary.currentTime() + seconds;\n\n  if (time < min) {\n    player.primary.currentTime(min);\n  } else if (time > max) {\n    player.primary.currentTime(max);\n  } else {\n    player.primary.currentTime(time);\n  }\n};\n\nconst skip = (change) => {\n  const min = 0;\n  const max = storage.slides.length - 1;\n  const time = player.primary.currentTime();\n\n  const current = getCurrentDataIndex(storage.slides, time);\n  if (current === -1) return null;\n\n  const index = current + change;\n\n  let timestamp;\n  if (index < min) {\n    timestamp = storage.slides[min].timestamp;\n  } else if (index > max) {\n    timestamp = storage.slides[max].timestamp;\n  } else {\n    timestamp = storage.slides[index].timestamp;\n  }\n\n  if (typeof timestamp !== 'undefined') {\n    player.primary.currentTime(timestamp);\n  }\n};\n\nexport {\n  search,\n  seek,\n  skip,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Body from './body';\nimport Footer from './footer';\nimport Header from './header';\nimport { search as config } from 'config';\nimport Modal from 'components/utils/modal';\nimport { search as getSearch } from 'utils/actions';\nimport storage from 'utils/data/storage';\nimport {\n  isEmpty,\n  isEqual,\n} from 'utils/data/validators';\nimport './index.scss';\n\nconst getValue = (event) => {\n  if (event && event.target) return event.target.value;\n\n  return null;\n};\n\nconst isValid = (value) => {\n  if (value && typeof value === 'string') {\n    return value.length >= config.length.min;\n  }\n\n  return false;\n};\n\nconst propTypes = {\n  handleClose: PropTypes.func,\n  handleSearch: PropTypes.func,\n};\n\nconst defaultProps = {\n  handleClose: () => {},\n  handleSearch: () => {},\n};\n\nconst Search = ({\n  handleClose,\n  handleSearch,\n}) => {\n  const [disabled, setDisabled] = useState(true);\n  const [search, setSearch] = useState([]);\n\n  const handleOnChange = (event) => {\n    const value = getValue(event);\n    if (isValid(value)) {\n      const result = getSearch(value, storage.thumbnails);\n\n      // If different, update search\n      if (!isEqual(search, result)) {\n        setSearch(result);\n      }\n\n      // Check to enable\n      if (disabled) setDisabled(false);\n    } else {\n      // If not empty, clear search\n      if (!isEmpty(search)) {\n        setSearch([]);\n      }\n\n      // Chack to disable\n      if (!disabled) setDisabled(true);\n    }\n  };\n\n  const handleOnClick = () => {\n    handleSearch(search);\n    handleClose();\n  };\n\n  return (\n    <Modal onClose={handleClose}>\n      <Header />\n      <Body\n        handleOnChange={(event) => handleOnChange(event)}\n        search={search}\n      />\n      <Footer\n        disabled={disabled}\n        handleOnClick={() => handleOnClick()}\n      />\n    </Modal>\n  );\n};\n\nSearch.propTypes = propTypes;\nSearch.defaultProps = defaultProps;\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Search, areEqual);\n","import React from 'react';\nimport AboutModal from 'components/modals/about';\nimport SearchModal from 'components/modals/search';\nimport { ID } from 'utils/constants';\n\nconst Modal = ({\n  handleClose,\n  handleSearch,\n  modal,\n}) => {\n  const open = modal.length > 0;\n\n  if (!open) return null;\n\n  switch (modal) {\n    case ID.ABOUT:\n      return (\n        <AboutModal handleClose={handleClose} />\n      );\n    case ID.SEARCH:\n      return (\n        <SearchModal\n          handleClose={handleClose}\n          handleSearch={handleSearch}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.modal !== nextProps.modal) return false;\n\n  return true;\n};\n\nexport default React.memo(Modal, areEqual);\n","import React from 'react';\nimport './index.scss';\n\nconst Bottom = () => {\n  return <div className=\"bottom-bar\" />;\n};\n\n// Avoid re-render\nconst areEqual = () => true;\n\nexport default React.memo(Bottom, areEqual);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n  FormattedDate,\n} from 'react-intl';\nimport cx from 'classnames';\nimport { controls as config } from 'config';\nimport { handleOnEnterPress } from 'utils/data/handlers';\nimport storage from 'utils/data/storage';\nimport layout from 'utils/layout';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  about: {\n    id: 'button.about.aria',\n    description: 'Aria label for the about button',\n  },\n});\n\nconst propTypes = { openAbout: PropTypes.func };\n\nconst defaultProps = { openAbout: () => {} };\n\nconst Title = ({ openAbout }) => {\n  const intl = useIntl();\n  const date = <FormattedDate value={new Date(storage.metadata.start)} />;\n\n  const interactive = layout.control && config.about;\n  if (!interactive) {\n\n    return (\n      <span className=\"title\">\n        {storage.metadata.name} - {date}\n      </span>\n    );\n  }\n\n  return (\n    <span\n      aria={intl.formatMessage(intlMessages.about)}\n      className={cx('title', { interactive })}\n      onClick={openAbout}\n      onKeyPress={event => handleOnEnterPress(event, openAbout)}\n      tabIndex=\"0\"\n    >\n      {storage.metadata.name} - {date}\n    </span>\n  );\n};\n\nTitle.propTypes = propTypes;\nTitle.defaultProps = defaultProps;\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport { controls as config } from 'config';\nimport { ID } from 'utils/constants';\nimport layout from 'utils/layout';\n\nconst intlMessages = defineMessages({\n  search: {\n    id: 'button.search.aria',\n    description: 'Aria label for the search button',\n  },\n});\n\nconst propTypes = { openSearch: PropTypes.func };\n\nconst defaultProps = { openSearch: () => {} };\n\nconst Search = ({ openSearch }) => {\n  const intl = useIntl();\n\n  if (!layout.control && config.search && !layout.single) return null;\n\n  return (\n    <Button\n      aria={intl.formatMessage(intlMessages.search)}\n      circle\n      handleOnClick={openSearch}\n      icon={ID.SEARCH}\n    />\n  );\n};\n\nSearch.propTypes = propTypes;\nSearch.defaultProps = defaultProps;\n\nexport default Search;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport { controls as config } from 'config';\nimport layout from 'utils/layout';\n\nconst intlMessages = defineMessages({\n  section: {\n    id: 'button.section.aria',\n    description: 'Aria label for the section button',\n  },\n});\n\nconst propTypes = {\n  section: PropTypes.bool,\n  toggleSection: PropTypes.func,\n};\n\nconst defaultProps = {\n  section: true,\n  toggleSection: () => {},\n};\n\nconst Section = ({\n  section,\n  toggleSection,\n}) => {\n  const intl = useIntl();\n\n  if (!layout.control && config.section) return null;\n\n  return (\n    <Button\n      aria={intl.formatMessage(intlMessages.section)}\n      circle\n      handleOnClick={toggleSection}\n      icon={section ? 'left' : 'right'}\n    />\n  );\n};\n\nSection.propTypes = propTypes;\nSection.defaultProps = defaultProps;\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Button from 'components/utils/button';\nimport { controls as config } from 'config';\nimport { ID } from 'utils/constants';\nimport layout from 'utils/layout';\n\nconst intlMessages = defineMessages({\n  swap: {\n    id: 'button.swap.aria',\n    description: 'Aria label for the swap button',\n  },\n});\n\nconst propTypes = { toggleSwap: PropTypes.func };\n\nconst defaultProps = { toggleSwap: () => {} };\n\nconst Swap = ({ toggleSwap }) => {\n  const intl = useIntl();\n\n  if (!layout.control && config.swap && !layout.single) return null;\n\n  return (\n    <Button\n      aria={intl.formatMessage(intlMessages.swap)}\n      circle\n      handleOnClick={toggleSwap}\n      icon={ID.SWAP}\n    />\n  );\n};\n\nSwap.propTypes = propTypes;\nSwap.defaultProps = defaultProps;\n\nexport default Swap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Title from './title';\nimport SearchButton from './buttons/search';\nimport SectionButton from './buttons/section';\nimport SwapButton from './buttons/swap';\nimport { ID } from 'utils/constants';\nimport './index.scss';\n\nconst propTypes = {\n  openModal: PropTypes.func,\n  section: PropTypes.bool,\n  toggleSection: PropTypes.func,\n  toggleSwap: PropTypes.func,\n};\n\nconst defaultProps = {\n  openModal: () => {},\n  section: false,\n  toggleSection: () => {},\n  toggleSwap: () => {},\n};\n\nconst Top = ({\n  openModal,\n  section,\n  toggleSection,\n  toggleSwap,\n}) => {\n\n  return (\n    <div className=\"top-bar\">\n      <div className=\"left\">\n        <SectionButton\n          section={section}\n          toggleSection={toggleSection}\n        />\n      </div>\n      <div className=\"center\">\n        <Title openAbout={() => openModal(ID.ABOUT)} />\n      </div>\n      <div className=\"right\">\n        <SearchButton openSearch={() => openModal(ID.SEARCH)} />\n        <SwapButton toggleSwap={toggleSwap} />\n      </div>\n    </div>\n  );\n};\n\nTop.propTypes = propTypes;\nTop.defaultProps = defaultProps;\n\n// Checks the side section state\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.section === nextProps.section;\n};\n\nexport default React.memo(Top, areEqual);\n","import { shortcuts as config } from 'config';\nimport logger from './logger';\n\nexport default class Shortcuts {\n  constructor(actions) {\n    this.enabled = config.enabled;\n\n    if (!this.enabled) {\n      logger.debug('shortcuts', 'disabled');\n    } else {\n      this.init(actions);\n    }\n  }\n\n  init(actions) {\n    this.listeners = [];\n\n    for (let prop in actions) {\n      const value = actions[prop];\n      if (typeof value === 'function') {\n        const key = config[prop];\n        this.add(key, value);\n      } else {\n        for (let p in value) {\n          const k = config[prop][p];\n          const v = value[p];\n          this.add(k, v);\n        }\n      }\n    }\n  }\n\n  add(key, action) {\n    if (!key || typeof key !== 'string') {\n      logger.warn('shortcuts', 'invalid', 'key');\n      return null;\n    } else if (key.length === 0) {\n      return null;\n    }\n\n    if (!action || typeof action !== 'function') {\n      logger.warn('shortcuts', 'invalid', 'action');\n      return null;\n    }\n\n    const listener = document.addEventListener('keydown', (e) => {\n      if (e.altKey && e.shiftKey) {\n        if (e.key === key) action();\n      }\n    });\n\n    this.listeners.push(listener);\n  }\n\n  destroy() {\n    this.listeners.forEach(listener => {\n      document.removeEventListener(listener);\n    });\n  }\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport cx from 'classnames';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport { shortcuts as config } from 'config';\nimport Application from './application';\nimport Content from './content';\nimport Media from './media';\nimport Modal from './modal';\nimport BottomBar from 'components/bars/bottom';\nimport TopBar from 'components/bars/top';\nimport {\n  seek,\n  skip,\n} from 'utils/actions';\nimport { ID } from 'utils/constants';\nimport layout from 'utils/layout';\nimport Shortcuts from 'utils/shortcuts';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'player.wrapper.aria',\n    description: 'Aria label for the player wrapper',\n  },\n});\n\nconst Player = () => {\n  const intl = useIntl();\n\n  const [fullscreen, setFullscreen] = useState(false);\n  const [modal, setModal] = useState('');\n  const [search, setSearch] = useState([]);\n  const [section, setSection] = useState(layout.section);\n  const [swap, setSwap] = useState(layout.swap);\n\n  const shortcuts = useRef();\n\n  useEffect(() => {\n    const { seconds } = config.seek;\n\n    const actions = {\n      fullscreen: () => setFullscreen(prevFullscreen => !prevFullscreen),\n      section: () => setSection(prevSection => !prevSection),\n      seek: {\n        backward: () => seek(-seconds),\n        forward: () => seek(+seconds),\n      },\n      skip: {\n        next: () => skip(+1),\n        previous: () => skip(-1),\n      },\n      swap: () => setSwap(prevSwap => !prevSwap),\n    };\n\n    shortcuts.current = new Shortcuts(actions);\n\n    return () => {\n      if (shortcuts.current) shortcuts.current.destroy();\n    };\n  }, []);\n\n  const style = {\n    'fullscreen-content': fullscreen,\n    'hidden-section': !section,\n    'single-content': layout.single,\n  };\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className={cx('player-wrapper', style)}\n      id={ID.PLAYER}\n    >\n      <TopBar\n        openModal={(type) => setModal(type)}\n        section={section}\n        toggleSection={() => setSection(prevSection => !prevSection)}\n        toggleSwap={() => setSwap(prevSwap => !prevSwap)}\n      />\n      <Media\n        fullscreen={fullscreen}\n        swap={swap}\n        toggleFullscreen={() => setFullscreen(prevFullscreen => !prevFullscreen)}\n      />\n      <Application />\n      <Content\n        fullscreen={fullscreen}\n        handleSearch={(value) => setSearch(value)}\n        search={search}\n        swap={swap}\n        toggleFullscreen={() => setFullscreen(prevFullscreen => !prevFullscreen)}\n      />\n      <BottomBar />\n      <Modal\n        handleClose={() => setModal('')}\n        handleSearch={(value) => setSearch(value)}\n        modal={modal}\n      />\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useRef, useState } from 'react';\nimport {\n  defineMessages,\n  useIntl,\n} from 'react-intl';\nimport Data from './data';\nimport Dots from './dots';\nimport Error from 'components/error';\nimport Player from 'components/player';\nimport {\n  ERROR,\n  ID,\n} from 'utils/constants';\nimport storage from 'utils/data/storage';\nimport layout from 'utils/layout';\nimport logger from 'utils/logger';\nimport {\n  getLayout,\n  getRecordId,\n} from 'utils/params';\nimport './index.scss';\n\nconst intlMessages = defineMessages({\n  aria: {\n    id: 'loader.wrapper.aria',\n    description: 'Aria label for the loader wrapper',\n  },\n});\n\nconst FEEDBACK = 1 * 1000;\n\nconst initError = (recordId) => recordId ? null : ERROR.BAD_REQUEST;\n\nconst Loader = ({ match }) => {\n  const intl = useIntl();\n  const counter = useRef(0);\n  const recordId = useRef(getRecordId(match));\n\n  const [error, setError] = useState(initError(recordId.current));\n  const [, setUpdate] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  if (error) return <Error code={error} />;\n\n  const onError = (error) => {\n    logger.error('loader', 'error', error);\n    setError(error);\n  };\n\n  const onUpdate = (data) => {\n    logger.debug('loader', 'update', data);\n    counter.current += 1;\n    setUpdate(counter.current);\n  };\n\n  const onLoaded = () => {\n    logger.debug('loader', 'loaded');\n    setTimeout(() => setLoaded(true), FEEDBACK);\n  };\n\n  storage.fetch(recordId.current, onUpdate, onLoaded, onError);\n\n  if (loaded) {\n    layout.mode = getLayout();\n\n    return <Player />;\n  }\n\n  return (\n    <div\n      aria-label={intl.formatMessage(intlMessages.aria)}\n      className=\"loader-wrapper\"\n      id={ID.LOADER}\n    >\n      <div className=\"loader-top\" />\n      <div className=\"loader-middle\">\n        <Dots />\n      </div>\n      <div className=\"loader-bottom\">\n        <Data data={storage.built} />\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import ar from './ar.json';\nimport de from './de.json';\nimport en from './en.json';\nimport es from './es.json';\nimport fa from './fa.json';\nimport fr from './fr.json';\nimport it from './it.json';\nimport ja from './ja.json';\nimport pt from './pt.json';\nimport ru from './ru.json';\nimport tr from './tr.json';\n\nconst messages = {\n  ar,\n  de,\n  en,\n  es,\n  fa,\n  fr,\n  it,\n  ja,\n  pt,\n  ru,\n  tr,\n};\n\nexport default messages;\n","import { locale as config } from 'config';\nimport messages from './messages';\nimport { getSearchParam } from 'utils/params';\n\nconst RTL_LOCALES = ['ar', 'fa'];\n\nconst setDirection = (locale) => {\n  if (RTL_LOCALES.includes(locale)) {\n    document.body.parentNode.setAttribute('dir', 'rtl');\n  } else {\n    document.body.parentNode.setAttribute('dir', 'ltr');\n  }\n};\n\nconst getLocale = () => {\n  // Try from the query params\n  let locale = getSearchParam('locale');\n\n  // If not, get browser default\n  if (!locale) locale = navigator.language;\n\n  // Sanitize\n  locale = locale.split(/[-_]/)[0];\n\n  // If the locale is missing, use the default fallback\n  if (!messages[locale]) locale = config.default.split(/[-_]/)[0];\n\n  setDirection(locale);\n\n  return locale;\n};\n\nconst getMessages = () => {\n  return messages;\n};\n\nexport {\n  getLocale,\n  getMessages,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Loader from 'components/loader';\nimport Router from 'components/router';\nimport {\n  getLocale,\n  getMessages,\n} from 'locales';\nimport { ROUTER } from 'utils/constants';\nimport { getStyle } from 'utils/params';\nimport './index.scss';\n\nconst locale = getLocale();\nconst messages = getMessages();\nconst style = getStyle();\n\nReactDOM.render(\n  (\n    <IntlProvider\n      locale={locale}\n      messages={messages[locale]}\n    >\n      {style ? <link rel=\"stylesheet\" type=\"text/css\" href={style} /> : null}\n      {ROUTER ? <Router /> : <Loader />}\n    </IntlProvider>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}